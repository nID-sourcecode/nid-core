// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wallet.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _wallet_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateConsentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateConsentRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateUuid(m.GetId()); err != nil {
		return CreateConsentRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for AccessToken

	if err := m._validateUuid(m.GetClientId()); err != nil {
		return CreateConsentRequestValidationError{
			field:  "ClientId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
	}

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for UserPseudo

	if v, ok := interface{}(m.GetGrantedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateConsentRequestValidationError{
				field:  "GrantedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

func (m *CreateConsentRequest) _validateUuid(uuid string) error {
	if matched := _wallet_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateConsentRequestValidationError is the validation error returned by
// CreateConsentRequest.Validate if the designated constraints aren't met.
type CreateConsentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateConsentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateConsentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateConsentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateConsentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateConsentRequestValidationError) ErrorName() string {
	return "CreateConsentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateConsentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateConsentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateConsentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateConsentRequestValidationError{}

// Validate checks the field values on ConsentResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ConsentResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for AccessToken

	// no validation rules for ClientId

	// no validation rules for Description

	// no validation rules for Name

	// no validation rules for UserId

	if v, ok := interface{}(m.GetGrantedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ConsentResponseValidationError{
				field:  "GrantedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ConsentResponseValidationError is the validation error returned by
// ConsentResponse.Validate if the designated constraints aren't met.
type ConsentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsentResponseValidationError) ErrorName() string { return "ConsentResponseValidationError" }

// Error satisfies the builtin error interface
func (e ConsentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsentResponseValidationError{}

// Validate checks the field values on GetBSNForPseudonymRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBSNForPseudonymRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Pseudonym

	return nil
}

// GetBSNForPseudonymRequestValidationError is the validation error returned by
// GetBSNForPseudonymRequest.Validate if the designated constraints aren't met.
type GetBSNForPseudonymRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBSNForPseudonymRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBSNForPseudonymRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBSNForPseudonymRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBSNForPseudonymRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBSNForPseudonymRequestValidationError) ErrorName() string {
	return "GetBSNForPseudonymRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBSNForPseudonymRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBSNForPseudonymRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBSNForPseudonymRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBSNForPseudonymRequestValidationError{}

// Validate checks the field values on GetBSNForPseudonymResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetBSNForPseudonymResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Bsn

	return nil
}

// GetBSNForPseudonymResponseValidationError is the validation error returned
// by GetBSNForPseudonymResponse.Validate if the designated constraints aren't met.
type GetBSNForPseudonymResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBSNForPseudonymResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBSNForPseudonymResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBSNForPseudonymResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBSNForPseudonymResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBSNForPseudonymResponseValidationError) ErrorName() string {
	return "GetBSNForPseudonymResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetBSNForPseudonymResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBSNForPseudonymResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBSNForPseudonymResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBSNForPseudonymResponseValidationError{}
