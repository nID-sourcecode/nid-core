// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: info_manager.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _info_manager_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on ScriptsTestRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScriptsTestRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Script

	return nil
}

// ScriptsTestRequestValidationError is the validation error returned by
// ScriptsTestRequest.Validate if the designated constraints aren't met.
type ScriptsTestRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptsTestRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptsTestRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptsTestRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptsTestRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptsTestRequestValidationError) ErrorName() string {
	return "ScriptsTestRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScriptsTestRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptsTestRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptsTestRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptsTestRequestValidationError{}

// Validate checks the field values on ScriptsUploadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ScriptsUploadRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Script

	// no validation rules for ScriptId

	// no validation rules for ChangeDescription

	return nil
}

// ScriptsUploadRequestValidationError is the validation error returned by
// ScriptsUploadRequest.Validate if the designated constraints aren't met.
type ScriptsUploadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptsUploadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptsUploadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptsUploadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptsUploadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptsUploadRequestValidationError) ErrorName() string {
	return "ScriptsUploadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScriptsUploadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptsUploadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptsUploadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptsUploadRequestValidationError{}

// Validate checks the field values on ScriptsGetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScriptsGetRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ScriptId

	// no validation rules for Version

	return nil
}

// ScriptsGetRequestValidationError is the validation error returned by
// ScriptsGetRequest.Validate if the designated constraints aren't met.
type ScriptsGetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptsGetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptsGetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptsGetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptsGetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptsGetRequestValidationError) ErrorName() string {
	return "ScriptsGetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ScriptsGetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptsGetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptsGetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptsGetRequestValidationError{}

// Validate checks the field values on ScriptsGetRespone with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ScriptsGetRespone) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SignedUrl

	return nil
}

// ScriptsGetResponeValidationError is the validation error returned by
// ScriptsGetRespone.Validate if the designated constraints aren't met.
type ScriptsGetResponeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ScriptsGetResponeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ScriptsGetResponeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ScriptsGetResponeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ScriptsGetResponeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ScriptsGetResponeValidationError) ErrorName() string {
	return "ScriptsGetResponeValidationError"
}

// Error satisfies the builtin error interface
func (e ScriptsGetResponeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sScriptsGetRespone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ScriptsGetResponeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ScriptsGetResponeValidationError{}
