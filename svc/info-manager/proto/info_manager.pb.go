// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: info_manager.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "lab.weave.nl/devops/proto-istio-auth-generator/proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ScriptsTestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script []byte `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *ScriptsTestRequest) Reset() {
	*x = ScriptsTestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_manager_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptsTestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptsTestRequest) ProtoMessage() {}

func (x *ScriptsTestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_manager_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptsTestRequest.ProtoReflect.Descriptor instead.
func (*ScriptsTestRequest) Descriptor() ([]byte, []int) {
	return file_info_manager_proto_rawDescGZIP(), []int{0}
}

func (x *ScriptsTestRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

type ScriptsUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Script            []byte `protobuf:"bytes,1,opt,name=script,proto3" json:"script,omitempty"`
	ScriptId          string `protobuf:"bytes,2,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	ChangeDescription string `protobuf:"bytes,3,opt,name=change_description,json=changeDescription,proto3" json:"change_description,omitempty"`
}

func (x *ScriptsUploadRequest) Reset() {
	*x = ScriptsUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_manager_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptsUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptsUploadRequest) ProtoMessage() {}

func (x *ScriptsUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_manager_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptsUploadRequest.ProtoReflect.Descriptor instead.
func (*ScriptsUploadRequest) Descriptor() ([]byte, []int) {
	return file_info_manager_proto_rawDescGZIP(), []int{1}
}

func (x *ScriptsUploadRequest) GetScript() []byte {
	if x != nil {
		return x.Script
	}
	return nil
}

func (x *ScriptsUploadRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ScriptsUploadRequest) GetChangeDescription() string {
	if x != nil {
		return x.ChangeDescription
	}
	return ""
}

type ScriptsGetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptId string `protobuf:"bytes,1,opt,name=script_id,json=scriptId,proto3" json:"script_id,omitempty"`
	Version  string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *ScriptsGetRequest) Reset() {
	*x = ScriptsGetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_manager_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptsGetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptsGetRequest) ProtoMessage() {}

func (x *ScriptsGetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_info_manager_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptsGetRequest.ProtoReflect.Descriptor instead.
func (*ScriptsGetRequest) Descriptor() ([]byte, []int) {
	return file_info_manager_proto_rawDescGZIP(), []int{2}
}

func (x *ScriptsGetRequest) GetScriptId() string {
	if x != nil {
		return x.ScriptId
	}
	return ""
}

func (x *ScriptsGetRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type ScriptsGetRespone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignedUrl string `protobuf:"bytes,1,opt,name=signed_url,json=signedUrl,proto3" json:"signed_url,omitempty"`
}

func (x *ScriptsGetRespone) Reset() {
	*x = ScriptsGetRespone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_info_manager_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptsGetRespone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptsGetRespone) ProtoMessage() {}

func (x *ScriptsGetRespone) ProtoReflect() protoreflect.Message {
	mi := &file_info_manager_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptsGetRespone.ProtoReflect.Descriptor instead.
func (*ScriptsGetRespone) Descriptor() ([]byte, []int) {
	return file_info_manager_proto_rawDescGZIP(), []int{3}
}

func (x *ScriptsGetRespone) GetSignedUrl() string {
	if x != nil {
		return x.SignedUrl
	}
	return ""
}

var File_info_manager_proto protoreflect.FileDescriptor

var file_info_manager_proto_rawDesc = []byte{
	0x0a, 0x12, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x6c, 0x61,
	0x62, 0x2e, 0x77, 0x65, 0x61, 0x76, 0x65, 0x2e, 0x6e, 0x6c, 0x2f, 0x64, 0x65, 0x76, 0x6f, 0x70,
	0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2d, 0x61, 0x75,
	0x74, 0x68, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2c,
	0x0a, 0x12, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x7a, 0x0a, 0x14,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x22, 0x32, 0x0a, 0x11, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x64, 0x55, 0x72, 0x6c, 0x32, 0xb7, 0x02, 0x0a, 0x0b, 0x49, 0x6e, 0x66,
	0x6f, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x60, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x73, 0x54, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x22, 0x0d, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x3a, 0x01, 0x2a, 0x12, 0x66, 0x0a, 0x0d, 0x53, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x2e, 0x69, 0x6e,
	0x66, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x73, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x22, 0x0f,
	0x2f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x2f, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x3a,
	0x01, 0x2a, 0x12, 0x5e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x47, 0x65, 0x74,
	0x12, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1e, 0x2e, 0x69, 0x6e, 0x66, 0x6f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x73, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x65,
	0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x73, 0x42, 0x09, 0x5a, 0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_info_manager_proto_rawDescOnce sync.Once
	file_info_manager_proto_rawDescData = file_info_manager_proto_rawDesc
)

func file_info_manager_proto_rawDescGZIP() []byte {
	file_info_manager_proto_rawDescOnce.Do(func() {
		file_info_manager_proto_rawDescData = protoimpl.X.CompressGZIP(file_info_manager_proto_rawDescData)
	})
	return file_info_manager_proto_rawDescData
}

var file_info_manager_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_info_manager_proto_goTypes = []interface{}{
	(*ScriptsTestRequest)(nil),   // 0: infomanager.ScriptsTestRequest
	(*ScriptsUploadRequest)(nil), // 1: infomanager.ScriptsUploadRequest
	(*ScriptsGetRequest)(nil),    // 2: infomanager.ScriptsGetRequest
	(*ScriptsGetRespone)(nil),    // 3: infomanager.ScriptsGetRespone
	(*empty.Empty)(nil),          // 4: google.protobuf.Empty
}
var file_info_manager_proto_depIdxs = []int32{
	0, // 0: infomanager.InfoManager.ScriptsTest:input_type -> infomanager.ScriptsTestRequest
	1, // 1: infomanager.InfoManager.ScriptsUpload:input_type -> infomanager.ScriptsUploadRequest
	2, // 2: infomanager.InfoManager.ScriptsGet:input_type -> infomanager.ScriptsGetRequest
	4, // 3: infomanager.InfoManager.ScriptsTest:output_type -> google.protobuf.Empty
	4, // 4: infomanager.InfoManager.ScriptsUpload:output_type -> google.protobuf.Empty
	3, // 5: infomanager.InfoManager.ScriptsGet:output_type -> infomanager.ScriptsGetRespone
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_info_manager_proto_init() }
func file_info_manager_proto_init() {
	if File_info_manager_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_info_manager_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptsTestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_manager_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptsUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_manager_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptsGetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_info_manager_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptsGetRespone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_info_manager_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_info_manager_proto_goTypes,
		DependencyIndexes: file_info_manager_proto_depIdxs,
		MessageInfos:      file_info_manager_proto_msgTypes,
	}.Build()
	File_info_manager_proto = out.File
	file_info_manager_proto_rawDesc = nil
	file_info_manager_proto_goTypes = nil
	file_info_manager_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// InfoManagerClient is the client API for InfoManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type InfoManagerClient interface {
	ScriptsTest(ctx context.Context, in *ScriptsTestRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ScriptsUpload(ctx context.Context, in *ScriptsUploadRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	ScriptsGet(ctx context.Context, in *ScriptsGetRequest, opts ...grpc.CallOption) (*ScriptsGetRespone, error)
}

type infoManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewInfoManagerClient(cc grpc.ClientConnInterface) InfoManagerClient {
	return &infoManagerClient{cc}
}

func (c *infoManagerClient) ScriptsTest(ctx context.Context, in *ScriptsTestRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/infomanager.InfoManager/ScriptsTest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoManagerClient) ScriptsUpload(ctx context.Context, in *ScriptsUploadRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/infomanager.InfoManager/ScriptsUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *infoManagerClient) ScriptsGet(ctx context.Context, in *ScriptsGetRequest, opts ...grpc.CallOption) (*ScriptsGetRespone, error) {
	out := new(ScriptsGetRespone)
	err := c.cc.Invoke(ctx, "/infomanager.InfoManager/ScriptsGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InfoManagerServer is the server API for InfoManager service.
type InfoManagerServer interface {
	ScriptsTest(context.Context, *ScriptsTestRequest) (*empty.Empty, error)
	ScriptsUpload(context.Context, *ScriptsUploadRequest) (*empty.Empty, error)
	ScriptsGet(context.Context, *ScriptsGetRequest) (*ScriptsGetRespone, error)
}

// UnimplementedInfoManagerServer can be embedded to have forward compatible implementations.
type UnimplementedInfoManagerServer struct {
}

func (*UnimplementedInfoManagerServer) ScriptsTest(context.Context, *ScriptsTestRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptsTest not implemented")
}
func (*UnimplementedInfoManagerServer) ScriptsUpload(context.Context, *ScriptsUploadRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptsUpload not implemented")
}
func (*UnimplementedInfoManagerServer) ScriptsGet(context.Context, *ScriptsGetRequest) (*ScriptsGetRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScriptsGet not implemented")
}

func RegisterInfoManagerServer(s *grpc.Server, srv InfoManagerServer) {
	s.RegisterService(&_InfoManager_serviceDesc, srv)
}

func _InfoManager_ScriptsTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptsTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoManagerServer).ScriptsTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infomanager.InfoManager/ScriptsTest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoManagerServer).ScriptsTest(ctx, req.(*ScriptsTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoManager_ScriptsUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptsUploadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoManagerServer).ScriptsUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infomanager.InfoManager/ScriptsUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoManagerServer).ScriptsUpload(ctx, req.(*ScriptsUploadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _InfoManager_ScriptsGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScriptsGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InfoManagerServer).ScriptsGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/infomanager.InfoManager/ScriptsGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InfoManagerServer).ScriptsGet(ctx, req.(*ScriptsGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _InfoManager_serviceDesc = grpc.ServiceDesc{
	ServiceName: "infomanager.InfoManager",
	HandlerType: (*InfoManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ScriptsTest",
			Handler:    _InfoManager_ScriptsTest_Handler,
		},
		{
			MethodName: "ScriptsUpload",
			Handler:    _InfoManager_ScriptsUpload_Handler,
		},
		{
			MethodName: "ScriptsGet",
			Handler:    _InfoManager_ScriptsGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "info_manager.proto",
}
