// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"

	generr "lab.weave.nl/weave/generator/pkg/errors"
)

// ScriptStatus Enum
type ScriptStatus int64

const (
	ScriptStatusDraft    ScriptStatus = 1
	ScriptStatusActive   ScriptStatus = 2
	ScriptStatusRejected ScriptStatus = 3
	ScriptStatusArchived ScriptStatus = 4
)

var scriptStatusStrings = map[int64]string{
	1: "Draft",
	2: "Active",
	3: "Rejected",
	4: "Archived",
}

var scriptStatusStringMap = map[string]ScriptStatus{
	"Draft":    ScriptStatusDraft,
	"Active":   ScriptStatusActive,
	"Rejected": ScriptStatusRejected,
	"Archived": ScriptStatusArchived,
}

var scriptStatusGQLStrings = map[int64]string{
	1: "DRAFT",
	2: "ACTIVE",
	3: "REJECTED",
	4: "ARCHIVED",
}

var scriptStatusGQLStringMap = map[string]ScriptStatus{
	"DRAFT":    ScriptStatusDraft,
	"ACTIVE":   ScriptStatusActive,
	"REJECTED": ScriptStatusRejected,
	"ARCHIVED": ScriptStatusArchived,
}

func (u *ScriptStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return generr.ErrEnumsMustBeStrings
	}

	*u, ok = scriptStatusGQLStringMap[str]
	if !ok {
		return fmt.Errorf("%w: %s for enum ScriptStatus", generr.ErrNotAValidEnumValue, str)
	}
	return nil
}

func (u ScriptStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(u.GQLString()))
}

func (u *ScriptStatus) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("%w: %v", generr.ErrCouldNotCastEnumValueToInt64, value)
	}
	*u = ScriptStatus(i)
	return nil
}

func (u *ScriptStatus) ScanFromString(name string) error {
	var ok bool
	*u, ok = scriptStatusStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum ScriptStatus", generr.ErrNotAValidNameForEnumValue, name)
	}
	return nil
}

func (u *ScriptStatus) ScanFromGQLString(name string) error {
	var ok bool
	*u, ok = scriptStatusGQLStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum ScriptStatus", generr.ErrNotAValidEnumValue, name)
	}
	return nil
}

func (u ScriptStatus) Value() (driver.Value, error) { return int64(u), nil }

func (u ScriptStatus) String() string {
	if u == 0 {
		return "undefined"
	}
	return scriptStatusStrings[int64(u)]
}

func (u ScriptStatus) GQLString() string {
	if u == 0 {
		return "UNDEFINED"
	}
	return scriptStatusGQLStrings[int64(u)]
}

func (u ScriptStatus) AllStrings() map[int64]string { return scriptStatusStrings }
