// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
)

// ScriptSource Relational Model
type ScriptSource struct {
	ID                uuid.UUID  `sql:"default:uuid_generate_v4()" gorm:"primary_key" json:"id"` // primary key
	ChangeDescription string     `json:"change_description"`
	Checksum          string     `json:"checksum"`
	RawScript         *string    `json:"raw_script"`
	ScriptID          uuid.UUID  `gorm:"index:idx_script_source_script_id" json:"script_id"`
	SignedURL         *string    `json:"signed_url"`
	Version           string     `json:"version"`
	CreatedAt         time.Time  `json:"created_at"`
	DeletedAt         *time.Time `json:"deleted_at"`
	UpdatedAt         time.Time  `json:"updated_at"`
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m ScriptSource) TableName() string {
	return "script_sources"
}

// ScriptSourceDB is the implementation of the storage interface for
// ScriptSource.
type ScriptSourceDB struct {
	Db *gorm.DB // Deprecated: Use ScriptSourceDB.DB() instead.
}

// NewScriptSourceDB creates a new storage type.
func NewScriptSourceDB(db *gorm.DB) *ScriptSourceDB {
	return &ScriptSourceDB{Db: db}
}

// DB returns the underlying database.
func (m *ScriptSourceDB) DB() interface{} {
	return m.Db
}

// TableName returns the table name of the associated model
//
// Deprecated: Use db.Model(ScriptSource{}) instead.
func (m *ScriptSourceDB) TableName() string {
	return "script_sources"
}

// CRUD Functions

// Get returns a single ScriptSource as a Database Model
func (m *ScriptSourceDB) Get(ctx context.Context, id uuid.UUID) (*ScriptSource, error) {
	var native ScriptSource
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of ScriptSource
func (m *ScriptSourceDB) List(ctx context.Context) ([]*ScriptSource, error) {
	var objs []*ScriptSource
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ScriptSourceDB) Add(ctx context.Context, model *ScriptSource) error {
	err := m.Db.Create(model).Error
	if err != nil {
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ScriptSourceDB) Update(ctx context.Context, model *ScriptSource) error {
	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ScriptSourceDB) Delete(ctx context.Context, id uuid.UUID) error {
	err := m.Db.Where("id = ?", id).Delete(&ScriptSource{}).Error
	if err != nil {
		return err
	}

	return nil
}
