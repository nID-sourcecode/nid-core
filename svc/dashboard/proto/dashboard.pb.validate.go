// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dashboard.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _dashboard_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on DeployServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeployServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return DeployServiceRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetServiceName()) < 1 {
		return DeployServiceRequestValidationError{
			field:  "ServiceName",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ServicePort

	if utf8.RuneCountInString(m.GetGqlUri()) < 1 {
		return DeployServiceRequestValidationError{
			field:  "GqlUri",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for DockerImage

	// no validation rules for Env

	return nil
}

// DeployServiceRequestValidationError is the validation error returned by
// DeployServiceRequest.Validate if the designated constraints aren't met.
type DeployServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployServiceRequestValidationError) ErrorName() string {
	return "DeployServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeployServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployServiceRequestValidationError{}

// Validate checks the field values on DeleteServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetNamespace()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Namespace",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		return DeleteServiceRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// DeleteServiceRequestValidationError is the validation error returned by
// DeleteServiceRequest.Validate if the designated constraints aren't met.
type DeleteServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteServiceRequestValidationError) ErrorName() string {
	return "DeleteServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteServiceRequestValidationError{}

// Validate checks the field values on DeployServiceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeployServiceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClusterUri

	// no validation rules for KubernetesOutput

	return nil
}

// DeployServiceResponseValidationError is the validation error returned by
// DeployServiceResponse.Validate if the designated constraints aren't met.
type DeployServiceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeployServiceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeployServiceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeployServiceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeployServiceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeployServiceResponseValidationError) ErrorName() string {
	return "DeployServiceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeployServiceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployServiceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeployServiceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeployServiceResponseValidationError{}

// Validate checks the field values on NamespaceList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *NamespaceList) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// NamespaceListValidationError is the validation error returned by
// NamespaceList.Validate if the designated constraints aren't met.
type NamespaceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NamespaceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NamespaceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NamespaceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NamespaceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NamespaceListValidationError) ErrorName() string { return "NamespaceListValidationError" }

// Error satisfies the builtin error interface
func (e NamespaceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNamespaceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NamespaceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NamespaceListValidationError{}

// Validate checks the field values on ListServiceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListServiceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Namespace

	return nil
}

// ListServiceRequestValidationError is the validation error returned by
// ListServiceRequest.Validate if the designated constraints aren't met.
type ListServiceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListServiceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListServiceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListServiceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListServiceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListServiceRequestValidationError) ErrorName() string {
	return "ListServiceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListServiceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListServiceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListServiceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListServiceRequestValidationError{}

// Validate checks the field values on ServiceList with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ServiceList) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ServiceListValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ServiceListValidationError is the validation error returned by
// ServiceList.Validate if the designated constraints aren't met.
type ServiceListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceListValidationError) ErrorName() string { return "ServiceListValidationError" }

// Error satisfies the builtin error interface
func (e ServiceListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sServiceList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceListValidationError{}

// Validate checks the field values on Service with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Service) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Namespace

	if v, ok := interface{}(m.GetAge()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ServiceValidationError{
				field:  "Age",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ServiceValidationError is the validation error returned by Service.Validate
// if the designated constraints aren't met.
type ServiceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ServiceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ServiceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ServiceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ServiceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ServiceValidationError) ErrorName() string { return "ServiceValidationError" }

// Error satisfies the builtin error interface
func (e ServiceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sService.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ServiceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ServiceValidationError{}
