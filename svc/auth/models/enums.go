// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"database/sql/driver"
	"fmt"
	"io"
	"strconv"

	generr "lab.weave.nl/weave/generator/pkg/errors"
)

// AccessModelType Enum
type AccessModelType int64

const (
	AccessModelTypeGQL  AccessModelType = 1
	AccessModelTypeREST AccessModelType = 2
)

var accessModelTypeStrings = map[int64]string{
	1: "GQL",
	2: "REST",
}

var accessModelTypeStringMap = map[string]AccessModelType{
	"GQL":  AccessModelTypeGQL,
	"REST": AccessModelTypeREST,
}

var accessModelTypeGQLStrings = map[int64]string{
	1: "GQL",
	2: "REST",
}

var accessModelTypeGQLStringMap = map[string]AccessModelType{
	"GQL":  AccessModelTypeGQL,
	"REST": AccessModelTypeREST,
}

func (u *AccessModelType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return generr.ErrEnumsMustBeStrings
	}

	*u, ok = accessModelTypeGQLStringMap[str]
	if !ok {
		return fmt.Errorf("%w: %s for enum AccessModelType", generr.ErrNotAValidEnumValue, str)
	}
	return nil
}

func (u AccessModelType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(u.GQLString()))
}

func (u *AccessModelType) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("%w: %v", generr.ErrCouldNotCastEnumValueToInt64, value)
	}
	*u = AccessModelType(i)
	return nil
}

func (u *AccessModelType) ScanFromString(name string) error {
	var ok bool
	*u, ok = accessModelTypeStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum AccessModelType", generr.ErrNotAValidNameForEnumValue, name)
	}
	return nil
}

func (u *AccessModelType) ScanFromGQLString(name string) error {
	var ok bool
	*u, ok = accessModelTypeGQLStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum AccessModelType", generr.ErrNotAValidEnumValue, name)
	}
	return nil
}

func (u AccessModelType) Value() (driver.Value, error) { return int64(u), nil }

func (u AccessModelType) String() string {
	if u == 0 {
		return "undefined"
	}
	return accessModelTypeStrings[int64(u)]
}

func (u AccessModelType) GQLString() string {
	if u == 0 {
		return "UNDEFINED"
	}
	return accessModelTypeGQLStrings[int64(u)]
}

func (u AccessModelType) AllStrings() map[int64]string { return accessModelTypeStrings }

// SessionState Enum
type SessionState int64

const (
	SessionStateUnclaimed    SessionState = 1
	SessionStateClaimed      SessionState = 2
	SessionStateAccepted     SessionState = 3
	SessionStateRejected     SessionState = 4
	SessionStateCodeGranted  SessionState = 5
	SessionStateTokenGranted SessionState = 6
)

var sessionStateStrings = map[int64]string{
	1: "unclaimed",
	2: "claimed",
	3: "accepted",
	4: "rejected",
	5: "code_granted",
	6: "token_granted",
}

var sessionStateStringMap = map[string]SessionState{
	"unclaimed":     SessionStateUnclaimed,
	"claimed":       SessionStateClaimed,
	"accepted":      SessionStateAccepted,
	"rejected":      SessionStateRejected,
	"code_granted":  SessionStateCodeGranted,
	"token_granted": SessionStateTokenGranted,
}

var sessionStateGQLStrings = map[int64]string{
	1: "UNCLAIMED",
	2: "CLAIMED",
	3: "ACCEPTED",
	4: "REJECTED",
	5: "CODE_GRANTED",
	6: "TOKEN_GRANTED",
}

var sessionStateGQLStringMap = map[string]SessionState{
	"UNCLAIMED":     SessionStateUnclaimed,
	"CLAIMED":       SessionStateClaimed,
	"ACCEPTED":      SessionStateAccepted,
	"REJECTED":      SessionStateRejected,
	"CODE_GRANTED":  SessionStateCodeGranted,
	"TOKEN_GRANTED": SessionStateTokenGranted,
}

func (u *SessionState) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return generr.ErrEnumsMustBeStrings
	}

	*u, ok = sessionStateGQLStringMap[str]
	if !ok {
		return fmt.Errorf("%w: %s for enum SessionState", generr.ErrNotAValidEnumValue, str)
	}
	return nil
}

func (u SessionState) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(u.GQLString()))
}

func (u *SessionState) Scan(value interface{}) error {
	i, ok := value.(int64)
	if !ok {
		return fmt.Errorf("%w: %v", generr.ErrCouldNotCastEnumValueToInt64, value)
	}
	*u = SessionState(i)
	return nil
}

func (u *SessionState) ScanFromString(name string) error {
	var ok bool
	*u, ok = sessionStateStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum SessionState", generr.ErrNotAValidNameForEnumValue, name)
	}
	return nil
}

func (u *SessionState) ScanFromGQLString(name string) error {
	var ok bool
	*u, ok = sessionStateGQLStringMap[name]
	if !ok {
		return fmt.Errorf("%w: %s for enum SessionState", generr.ErrNotAValidEnumValue, name)
	}
	return nil
}

func (u SessionState) Value() (driver.Value, error) { return int64(u), nil }

func (u SessionState) String() string {
	if u == 0 {
		return "undefined"
	}
	return sessionStateStrings[int64(u)]
}

func (u SessionState) GQLString() string {
	if u == 0 {
		return "UNDEFINED"
	}
	return sessionStateGQLStrings[int64(u)]
}

func (u SessionState) AllStrings() map[int64]string { return sessionStateStrings }
