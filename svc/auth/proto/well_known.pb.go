// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: well_known.proto

package proto

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "lab.weave.nl/devops/proto-istio-auth-generator/proto"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type WellKnownType int32

const (
	WellKnownType_WELLKNOWN_TYPE_UNSPECIFIED WellKnownType = 0
	// REQUIRED. URL of the authorization server's authorization endpoint
	//   [RFC6749] [OpenID.Core].
	WellKnownType_AUTHORIZATION_ENDPOINT WellKnownType = 1
	// COMPLEX. URL of the authorization server's token endpoint [RFC6749]
	//   [OpenID.Core].
	// Note:  This is REQUIRED unless only the implicit grant type is supported.
	WellKnownType_TOKEN_ENDPOINT WellKnownType = 2
	// Note:  The referenced document contains the signing key(s) the client uses
	//   to validate signatures from the authorization server. This URL MUST use
	//   the "https" scheme. The JWK Set MAY also contain the server's encryption
	//   key or keys, which are used by clients to encrypt requests to the server.
	//   When both signing and encryption keys are made available, a "use" (public
	//   key use) parameter value is REQUIRED for all keys in the referenced JWK
	//   Set to indicate each key's intended usage.
	WellKnownType_JWKS_URI WellKnownType = 3
	// RECOMMENDED. URL of the authorization server's OAuth 2.0 Dynamic Client
	//   Registration endpoint [RFC7591] [OpenID.Registration].
	WellKnownType_REGISTRATION_ENDPOINT WellKnownType = 4
	// OPTIONAL. URL of a page containing human-readable information that
	//   developers might want or need to know when using the authorization
	//   server.
	// Note:  In particular, if the authorization server does not support Dynamic
	//   Client Registration, then information on how to register clients needs to
	//   be provided in this documentation.
	WellKnownType_SERVICE_DOCUMENTATION WellKnownType = 5
	// OPTIONAL. URL that the authorization server provides to the person
	//   registering the client to read about the authorization server's
	//   requirements on how the client can use the data provided by the
	//   authorization server.
	// Note:  The registration process SHOULD display this URL to the person
	//   registering the client if it is given. As described in Section 5, despite
	//   the identifier "op_policy_uri" appearing to be OpenID-specific, its usage
	//   in this specification is actually referring to a general OAuth 2.0
	//   feature that is not specific to OpenID Connect.
	WellKnownType_OP_POLICY_URI WellKnownType = 6
	// OPTIONAL. URL that the authorization server provides to the person
	//   registering the client to read about the authorization server's terms of
	//   service.
	// Note:  The registration process SHOULD display this URL to the person
	//   registering the client if it is given. As described in Section 5, despite
	//   the identifier "op_tos_uri", appearing to be OpenID-specific, its usage
	//   in this specification is actually referring to a general OAuth 2.0
	//   feature that is not specific to OpenID Connect.
	WellKnownType_OP_TOS_URI WellKnownType = 7
	// OPTIONAL. URL of the authorization server's OAuth 2.0 revocation endpoint
	//   [RFC7009].
	WellKnownType_REVOCATION_ENDPOINT WellKnownType = 8
	// OPTIONAL. URL of the authorization server's OAuth 2.0 introspection
	//   endpoint [RFC7662].
	WellKnownType_INTROSPECTION_ENDPOINT WellKnownType = 9
	// RECOMMENDED. URL of the authorization server's UserInfo Endpoint
	//   [OpenID.Core].
	// Note:  This URL MUST use the https scheme and MAY contain port, path, and
	//   query parameter components.
	WellKnownType_USERINFO_ENDPOINT WellKnownType = 10
	// OPTIONAL. URL of an authorization server iframe that supports cross-origin
	//   communications for session state information with the RP Client, using
	//   the HTML5 postMessage API.
	// Note:  This URL MUST use the https scheme and MAY contain port, path, and
	//   query parameter components. The page is loaded from an invisible iframe
	//   embedded in an RP page so that it can run in the authorization server's
	//   security context. It accepts postMessage requests from the relevant RP
	//   iframe and uses postMessage to post back the login status of the End-User
	//   at the OP.
	WellKnownType_CHECK_SESSION_IFRAME WellKnownType = 11
)

// Enum value maps for WellKnownType.
var (
	WellKnownType_name = map[int32]string{
		0:  "WELLKNOWN_TYPE_UNSPECIFIED",
		1:  "AUTHORIZATION_ENDPOINT",
		2:  "TOKEN_ENDPOINT",
		3:  "JWKS_URI",
		4:  "REGISTRATION_ENDPOINT",
		5:  "SERVICE_DOCUMENTATION",
		6:  "OP_POLICY_URI",
		7:  "OP_TOS_URI",
		8:  "REVOCATION_ENDPOINT",
		9:  "INTROSPECTION_ENDPOINT",
		10: "USERINFO_ENDPOINT",
		11: "CHECK_SESSION_IFRAME",
	}
	WellKnownType_value = map[string]int32{
		"WELLKNOWN_TYPE_UNSPECIFIED": 0,
		"AUTHORIZATION_ENDPOINT":     1,
		"TOKEN_ENDPOINT":             2,
		"JWKS_URI":                   3,
		"REGISTRATION_ENDPOINT":      4,
		"SERVICE_DOCUMENTATION":      5,
		"OP_POLICY_URI":              6,
		"OP_TOS_URI":                 7,
		"REVOCATION_ENDPOINT":        8,
		"INTROSPECTION_ENDPOINT":     9,
		"USERINFO_ENDPOINT":          10,
		"CHECK_SESSION_IFRAME":       11,
	}
)

func (x WellKnownType) Enum() *WellKnownType {
	p := new(WellKnownType)
	*p = x
	return p
}

func (x WellKnownType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WellKnownType) Descriptor() protoreflect.EnumDescriptor {
	return file_well_known_proto_enumTypes[0].Descriptor()
}

func (WellKnownType) Type() protoreflect.EnumType {
	return &file_well_known_proto_enumTypes[0]
}

func (x WellKnownType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WellKnownType.Descriptor instead.
func (WellKnownType) EnumDescriptor() ([]byte, []int) {
	return file_well_known_proto_rawDescGZIP(), []int{0}
}

type WellKnownRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *WellKnownRequest) Reset() {
	*x = WellKnownRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_well_known_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownRequest) ProtoMessage() {}

func (x *WellKnownRequest) ProtoReflect() protoreflect.Message {
	mi := &file_well_known_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownRequest.ProtoReflect.Descriptor instead.
func (*WellKnownRequest) Descriptor() ([]byte, []int) {
	return file_well_known_proto_rawDescGZIP(), []int{0}
}

type WellKnownResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// REQUIRED. The authorization server's issuer identifier, which is a URL that
	//   uses the "https" scheme and has no query or fragment components.
	// Note:  Authorization server metadata is published at a location that is
	//   ".well-known" according to RFC 5785 [RFC5785] derived from this issuer
	//   identifier, as described in Section 3. The issuer identifier is used to
	//   prevent authorization server mix- up attacks, as described in "OAuth 2.0
	//   Mix-Up Mitigation" [MIX-UP].
	Issuer string `protobuf:"bytes,1,opt,name=issuer,proto3" json:"issuer,omitempty"`
	// REQUIRED. URL of the authorization server's authorization endpoint
	//   [RFC6749] [OpenID.Core].
	AuthorizationEndpoint string `protobuf:"bytes,2,opt,name=authorization_endpoint,json=authorizationEndpoint,proto3" json:"authorization_endpoint,omitempty"`
	// COMPLEX. URL of the authorization server's token endpoint [RFC6749]
	//   [OpenID.Core].
	// Note:  This is REQUIRED unless only the implicit grant type is supported.
	TokenEndpoint string `protobuf:"bytes,3,opt,name=token_endpoint,json=tokenEndpoint,proto3" json:"token_endpoint,omitempty"`
	// REQUIRED. URL of the authorization server's JWK Set [JWK] document.
	// Note:  The referenced document contains the signing key(s) the client uses
	//   to validate signatures from the authorization server. This URL MUST use
	//   the "https" scheme. The JWK Set MAY also contain the server's encryption
	//   key or keys, which are used by clients to encrypt requests to the server.
	//   When both signing and encryption keys are made available, a "use" (public
	//   key use) parameter value is REQUIRED for all keys in the referenced JWK
	//   Set to indicate each key's intended usage.
	JwksUri string `protobuf:"bytes,4,opt,name=jwks_uri,json=jwksUri,proto3" json:"jwks_uri,omitempty"`
	// RECOMMENDED. URL of the authorization server's OAuth 2.0 Dynamic Client
	//   Registration endpoint [RFC7591] [OpenID.Registration].
	RegistrationEndpoint string `protobuf:"bytes,5,opt,name=registration_endpoint,json=registrationEndpoint,proto3" json:"registration_endpoint,omitempty"`
	// RECOMMENDED. List of the OAuth 2.0 [RFC6749] "scope" values that this
	//   authorization server supports.
	// Note:  Servers MAY choose not to advertise some supported scope values even
	//   when this parameter is used.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ScopesSupported []string `protobuf:"bytes,6,rep,name=scopes_supported,json=scopesSupported,proto3" json:"scopes_supported,omitempty"`
	// REQUIRED. List of the OAuth 2.0 "response_type" values that this
	//   authorization server supports.
	// Note:  The array values used are the same as those used with the
	//   "response_types" parameter defined by "OAuth 2.0 Dynamic Client
	//   Registration Protocol" [RFC7591]. Dynamic OpenID Providers MUST support
	//   the code, id_token, and the token id_token Response Type values
	//   [OpenID.Core].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ResponseTypesSupported []string `protobuf:"bytes,7,rep,name=response_types_supported,json=responseTypesSupported,proto3" json:"response_types_supported,omitempty"`
	// OPTIONAL. List of the OAuth 2.0 "response_mode" values that this
	//   authorization server supports, as specified in "OAuth 2.0 Multiple
	//   Response Type Encoding Practices" [OAuth.Responses].
	// Note:  If omitted, the default is "["query", "fragment"]". The response
	//   mode value "form_post" is also defined in "OAuth 2.0 Form Post Response
	//   Mode" [OAuth.Post].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ResponseModesSupported []string `protobuf:"bytes,8,rep,name=response_modes_supported,json=responseModesSupported,proto3" json:"response_modes_supported,omitempty"`
	// OPTIONAL. List of the OAuth 2.0 grant type values that this authorization
	//   server supports.
	// Note:  The array values used are the same as those used with the
	//   "grant_types" parameter defined by "OAuth 2.0 Dynamic Client Registration
	//   Protocol" [RFC7591]. If omitted, the default value is
	//   "["authorization_code", "implicit"]".
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	GrantTypesSupported []string `protobuf:"bytes,9,rep,name=grant_types_supported,json=grantTypesSupported,proto3" json:"grant_types_supported,omitempty"`
	// OPTIONAL. List of client authentication methods supported by this token
	//   endpoint.
	// Note:  Client authentication method values are used in the
	//   "token_endpoint_auth_method" parameter defined in Section 2 of [RFC7591].
	//   The options are client_secret_post, client_secret_basic,
	//   client_secret_jwt, and private_key_jwt, as described in Section 9 of
	//   OpenID Connect Core 1.0 [OpenID.Core]. Other authentication methods MAY
	//   be defined by extensions. If omitted, the default is
	//   "client_secret_basic" -- the HTTP Basic Authentication Scheme specified
	//   in Section 2.3.1 of OAuth 2.0 [RFC6749].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	TokenEndpointAuthMethodsSupported []string `protobuf:"bytes,10,rep,name=token_endpoint_auth_methods_supported,json=tokenEndpointAuthMethodsSupported,proto3" json:"token_endpoint_auth_methods_supported,omitempty"`
	// OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
	//   the token endpoint for the signature on the JWT [JWT] used to
	//   authenticate the client at the token endpoint for the "private_key_jwt"
	//   and "client_secret_jwt" authentication methods.
	// Note:  This metadata entry MUST be present if either of these
	//   authentication methods are specified in the
	//   "token_endpoint_auth_methods_supported" entry. No default algorithms are
	//   implied if this entry is omitted. Servers SHOULD support "RS256". The
	//   value "none" MUST NOT be used.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	TokenEndpointAuthSigningAlgValuesSupported []string `protobuf:"bytes,11,rep,name=token_endpoint_auth_signing_alg_values_supported,json=tokenEndpointAuthSigningAlgValuesSupported,proto3" json:"token_endpoint_auth_signing_alg_values_supported,omitempty"`
	// OPTIONAL. URL of a page containing human-readable information that
	//   developers might want or need to know when using the authorization
	//   server.
	// Note:  In particular, if the authorization server does not support Dynamic
	//   Client Registration, then information on how to register clients needs to
	//   be provided in this documentation.
	ServiceDocumentation string `protobuf:"bytes,12,opt,name=service_documentation,json=serviceDocumentation,proto3" json:"service_documentation,omitempty"`
	// OPTIONAL. Languages and scripts supported for the user interface,
	//   represented as a JSON array of language tag values from BCP 47 [RFC5646].
	// Note:  If omitted, the set of supported languages and scripts is
	//   unspecified.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	UiLocalesSupported []string `protobuf:"bytes,13,rep,name=ui_locales_supported,json=uiLocalesSupported,proto3" json:"ui_locales_supported,omitempty"`
	// OPTIONAL. URL that the authorization server provides to the person
	//   registering the client to read about the authorization server's
	//   requirements on how the client can use the data provided by the
	//   authorization server.
	// Note:  The registration process SHOULD display this URL to the person
	//   registering the client if it is given. As described in Section 5, despite
	//   the identifier "op_policy_uri" appearing to be OpenID-specific, its usage
	//   in this specification is actually referring to a general OAuth 2.0
	//   feature that is not specific to OpenID Connect.
	OpPolicyUri string `protobuf:"bytes,14,opt,name=op_policy_uri,json=opPolicyUri,proto3" json:"op_policy_uri,omitempty"`
	// OPTIONAL. URL that the authorization server provides to the person
	//   registering the client to read about the authorization server's terms of
	//   service.
	// Note:  The registration process SHOULD display this URL to the person
	//   registering the client if it is given. As described in Section 5, despite
	//   the identifier "op_tos_uri", appearing to be OpenID-specific, its usage
	//   in this specification is actually referring to a general OAuth 2.0
	//   feature that is not specific to OpenID Connect.
	OpTosUri string `protobuf:"bytes,15,opt,name=op_tos_uri,json=opTosUri,proto3" json:"op_tos_uri,omitempty"`
	// OPTIONAL. URL of the authorization server's OAuth 2.0 revocation endpoint
	//   [RFC7009].
	RevocationEndpoint string `protobuf:"bytes,16,opt,name=revocation_endpoint,json=revocationEndpoint,proto3" json:"revocation_endpoint,omitempty"`
	// OPTIONAL. List of client authentication methods supported by this
	//   revocation endpoint.
	// Note:  The valid client authentication method values are those registered
	//   in the IANA "OAuth Token Endpoint Authentication Methods" registry
	//   [IANA.OAuth.Parameters]. If omitted, the default is "client_secret_basic"
	//   -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of
	//   OAuth 2.0 [RFC6749].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	RevocationEndpointAuthMethodsSupported []string `protobuf:"bytes,17,rep,name=revocation_endpoint_auth_methods_supported,json=revocationEndpointAuthMethodsSupported,proto3" json:"revocation_endpoint_auth_methods_supported,omitempty"`
	// OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
	//   the revocation endpoint for the signature on the JWT [JWT] used to
	//   authenticate the client at the revocation endpoint for the
	//   "private_key_jwt" and "client_secret_jwt" authentication methods.
	// Note:  This metadata entry MUST be present if either of these
	//   authentication methods are specified in the
	//   "revocation_endpoint_auth_methods_supported" entry. No default algorithms
	//   are implied if this entry is omitted. The value "none" MUST NOT be used.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	RevocationEndpointAuthSigningAlgValuesSupported []string `protobuf:"bytes,18,rep,name=revocation_endpoint_auth_signing_alg_values_supported,json=revocationEndpointAuthSigningAlgValuesSupported,proto3" json:"revocation_endpoint_auth_signing_alg_values_supported,omitempty"`
	// OPTIONAL. URL of the authorization server's OAuth 2.0 introspection
	//   endpoint [RFC7662].
	IntrospectionEndpoint string `protobuf:"bytes,19,opt,name=introspection_endpoint,json=introspectionEndpoint,proto3" json:"introspection_endpoint,omitempty"`
	// OPTIONAL. List of client authentication methods supported by this
	//   introspection endpoint.
	// Note:  The valid client authentication method values are those registered
	//   in the IANA "OAuth Token Endpoint Authentication Methods" registry
	//   [IANA.OAuth.Parameters] or those registered in the IANA "OAuth Access
	//   Token Types" registry [IANA.OAuth.Parameters]. (These values are and will
	//   remain distinct, due to Section 7.2.) If omitted, the set of supported
	//   authentication methods MUST be determined by other means.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	IntrospectionEndpointAuthMethodsSupported []string `protobuf:"bytes,20,rep,name=introspection_endpoint_auth_methods_supported,json=introspectionEndpointAuthMethodsSupported,proto3" json:"introspection_endpoint_auth_methods_supported,omitempty"`
	// OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
	//   the introspection endpoint for the signature on the JWT [JWT] used to
	//   authenticate the client at the introspection endpoint for the
	//   "private_key_jwt" and "client_secret_jwt" authentication methods.
	// Note:  This metadata entry MUST be present if either of these
	//   authentication methods are specified in the
	//   "introspection_endpoint_auth_methods_supported" entry. No default
	//   algorithms are implied if this entry is omitted. The value "none" MUST
	//   NOT be used.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	IntrospectionEndpointAuthSigningAlgValuesSupported []string `protobuf:"bytes,21,rep,name=introspection_endpoint_auth_signing_alg_values_supported,json=introspectionEndpointAuthSigningAlgValuesSupported,proto3" json:"introspection_endpoint_auth_signing_alg_values_supported,omitempty"`
	// OPTIONAL. List of Proof Key for Code Exchange (PKCE) [RFC7636] code
	//   challenge methods supported by this authorization server.
	// Note:  Code challenge method values are used in the "code_challenge_method"
	//   parameter defined in Section 4.3 of [RFC7636]. The valid code challenge
	//   method values are those registered in the IANA "PKCE Code Challenge
	//   Methods" registry [IANA.OAuth.Parameters]. If omitted, the authorization
	//   server does not support PKCE.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	CodeChallengeMethodsSupported []string `protobuf:"bytes,22,rep,name=code_challenge_methods_supported,json=codeChallengeMethodsSupported,proto3" json:"code_challenge_methods_supported,omitempty"`
	// OPTIONAL. A JWT containing metadata values about the authorization server
	//   as claims.
	// Note:  This is a string value consisting of the entire signed JWT. A
	//   "signed_metadata" metadata value SHOULD NOT appear as a claim in the JWT.
	SignedMetadata string `protobuf:"bytes,23,opt,name=signed_metadata,json=signedMetadata,proto3" json:"signed_metadata,omitempty"`
	// RECOMMENDED. URL of the authorization server's UserInfo Endpoint
	//   [OpenID.Core].
	// Note:  This URL MUST use the https scheme and MAY contain port, path, and
	//   query parameter components.
	UserinfoEndpoint string `protobuf:"bytes,24,opt,name=userinfo_endpoint,json=userinfoEndpoint,proto3" json:"userinfo_endpoint,omitempty"`
	// OPTIONAL. List of the Authentication Context Class References that this
	//   authorization server supports.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	AcrValuesSupported []string `protobuf:"bytes,25,rep,name=acr_values_supported,json=acrValuesSupported,proto3" json:"acr_values_supported,omitempty"`
	// REQUIRED. List of the Subject Identifier types that this authorization
	//   server supports.
	// Note:  Valid types include pairwise and public.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	SubjectTypesSupported []string `protobuf:"bytes,26,rep,name=subject_types_supported,json=subjectTypesSupported,proto3" json:"subject_types_supported,omitempty"`
	// REQUIRED. List of the JWS signing algorithms (alg values) supported by the
	//   authorization server for the ID Token to encode the Claims in a JWT
	//   [JWT].
	// Note:  The algorithm RS256 MUST be included. The value none MAY be
	//   supported, but MUST NOT be used unless the Response Type used returns no
	//   ID Token from the Authorization Endpoint (such as when using the
	//   Authorization Code Flow).
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	IdTokenSigningAlgValuesSupported []string `protobuf:"bytes,27,rep,name=id_token_signing_alg_values_supported,json=idTokenSigningAlgValuesSupported,proto3" json:"id_token_signing_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE encryption algorithms (alg values) supported by
	//   the authorization server for the ID Token to encode the Claims in a JWT
	//   [JWT].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	IdTokenEncryptionAlgValuesSupported []string `protobuf:"bytes,28,rep,name=id_token_encryption_alg_values_supported,json=idTokenEncryptionAlgValuesSupported,proto3" json:"id_token_encryption_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE encryption algorithms (enc values) supported by
	//   the authorization server for the ID Token to encode the Claims in a JWT
	//   [JWT].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	IdTokenEncryptionEncValuesSupported []string `protobuf:"bytes,29,rep,name=id_token_encryption_enc_values_supported,json=idTokenEncryptionEncValuesSupported,proto3" json:"id_token_encryption_enc_values_supported,omitempty"`
	// OPTIONAL. List of the JWS [JWS] signing algorithms (alg values) [JWA]
	//   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
	// Note:  The value none MAY be included.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	UserinfoSigningAlgValuesSupported []string `protobuf:"bytes,30,rep,name=userinfo_signing_alg_values_supported,json=userinfoSigningAlgValuesSupported,proto3" json:"userinfo_signing_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE [JWE] encryption algorithms (alg values) [JWA]
	//   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	UserinfoEncryptionAlgValuesSupported []string `protobuf:"bytes,31,rep,name=userinfo_encryption_alg_values_supported,json=userinfoEncryptionAlgValuesSupported,proto3" json:"userinfo_encryption_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE encryption algorithms (enc values) [JWA]
	//   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	UserinfoEncryptionEncValuesSupported []string `protobuf:"bytes,32,rep,name=userinfo_encryption_enc_values_supported,json=userinfoEncryptionEncValuesSupported,proto3" json:"userinfo_encryption_enc_values_supported,omitempty"`
	// OPTIONAL. List of the JWS signing algorithms (alg values) supported by the
	//   authorization server for Request Objects, which are described in Section
	//   6.1 of OpenID Connect Core 1.0 [OpenID.Core].
	// Note:  These algorithms are used both when the Request Object is passed by
	//   value (using the request parameter) and when it is passed by reference
	//   (using the request_uri parameter). Servers SHOULD support none and RS256.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	RequestObjectSigningAlgValuesSupported []string `protobuf:"bytes,33,rep,name=request_object_signing_alg_values_supported,json=requestObjectSigningAlgValuesSupported,proto3" json:"request_object_signing_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE encryption algorithms (alg values) supported by
	//   the authorization server for Request Objects.
	// Note:  These algorithms are used both when the Request Object is passed by
	//   value and when it is passed by reference.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	RequestObjectEncryptionAlgValuesSupported []string `protobuf:"bytes,34,rep,name=request_object_encryption_alg_values_supported,json=requestObjectEncryptionAlgValuesSupported,proto3" json:"request_object_encryption_alg_values_supported,omitempty"`
	// OPTIONAL. List of the JWE encryption algorithms (enc values) supported by
	//   the authorization server for Request Objects.
	// Note:  These algorithms are used both when the Request Object is passed by
	//   value and when it is passed by reference.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	RequestObjectEncryptionEncValuesSupported []string `protobuf:"bytes,35,rep,name=request_object_encryption_enc_values_supported,json=requestObjectEncryptionEncValuesSupported,proto3" json:"request_object_encryption_enc_values_supported,omitempty"`
	// OPTIONAL. List of the display parameter values that the OpenID Provider
	//   supports.
	// Note:  These values are described in Section 3.1.2.1 of OpenID Connect Core
	//   1.0 [OpenID.Core].
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	DisplayValuesSupported []string `protobuf:"bytes,36,rep,name=display_values_supported,json=displayValuesSupported,proto3" json:"display_values_supported,omitempty"`
	// OPTIONAL. List of the Claim Types that the OpenID Provider supports.
	// Note:  These Claim Types are described in Section 5.6 of OpenID Connect
	//   Core 1.0 [OpenID.Core]. Values defined by this specification are normal,
	//   aggregated, and distributed. If omitted, the implementation supports only
	//   normal Claims.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ClaimTypesSupported []string `protobuf:"bytes,37,rep,name=claim_types_supported,json=claimTypesSupported,proto3" json:"claim_types_supported,omitempty"`
	// RECOMMENDED. List of the Claim Names of the Claims that the OpenID Provider
	//   MAY be able to supply values for.
	// Note:  Note that for privacy or other reasons, this might not be an
	//   exhaustive list.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ClaimsSupported []string `protobuf:"bytes,38,rep,name=claims_supported,json=claimsSupported,proto3" json:"claims_supported,omitempty"`
	// OPTIONAL. Languages and scripts supported for values in Claims being
	//   returned, represented as a JSON array of BCP47 [RFC5646] language tag
	//   values.
	// Note:  Not all languages and scripts are necessarily supported for all
	//   Claim values.
	// protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
	ClaimsLocalesSupported []string `protobuf:"bytes,39,rep,name=claims_locales_supported,json=claimsLocalesSupported,proto3" json:"claims_locales_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   supports use of the claims parameter, with true indicating support.
	// Note:  If omitted, the default value is false.
	ClaimsParameterSupported bool `protobuf:"varint,40,opt,name=claims_parameter_supported,json=claimsParameterSupported,proto3" json:"claims_parameter_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   supports use of the request parameter, with true indicating support.
	// Note:  If omitted, the default value is false.
	RequestParameterSupported bool `protobuf:"varint,41,opt,name=request_parameter_supported,json=requestParameterSupported,proto3" json:"request_parameter_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   supports use of the request_uri parameter, with true indicating support.
	// Note:  If omitted, the default value is true.
	RequestUriParameterSupported bool `protobuf:"varint,42,opt,name=request_uri_parameter_supported,json=requestUriParameterSupported,proto3" json:"request_uri_parameter_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   requires any request_uri values used to be pre-registered using the
	//   request_uris registration parameter.
	// Note:  Pre-registration is REQUIRED when the value is true. If omitted, the
	//   default value is false.
	RequireRequestUriRegistration bool `protobuf:"varint,43,opt,name=require_request_uri_registration,json=requireRequestUriRegistration,proto3" json:"require_request_uri_registration,omitempty"`
	// OPTIONAL. URL of an authorization server iframe that supports cross-origin
	//   communications for session state information with the RP Client, using
	//   the HTML5 postMessage API.
	// Note:  This URL MUST use the https scheme and MAY contain port, path, and
	//   query parameter components. The page is loaded from an invisible iframe
	//   embedded in an RP page so that it can run in the authorization server's
	//   security context. It accepts postMessage requests from the relevant RP
	//   iframe and uses postMessage to post back the login status of the End-User
	//   at the OP.
	CheckSessionIframe string `protobuf:"bytes,44,opt,name=check_session_iframe,json=checkSessionIframe,proto3" json:"check_session_iframe,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   supports HTTP-based logout, with true indicating support.
	// Note:  If omitted, the default value is false.
	FrontchannelLogoutSupported bool `protobuf:"varint,45,opt,name=frontchannel_logout_supported,json=frontchannelLogoutSupported,proto3" json:"frontchannel_logout_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server can
	//   pass iss (issuer) and sid (session ID) query parameters to identify the
	//   RP session with the authorization server when the frontchannel_logout_uri
	//   is used.
	// Note:  If supported, the sid Claim is also included in ID Tokens issued by
	//   the OP. If omitted, the default value is false.
	FrontchannelLogoutSessionSupported bool `protobuf:"varint,46,opt,name=frontchannel_logout_session_supported,json=frontchannelLogoutSessionSupported,proto3" json:"frontchannel_logout_session_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server
	//   supports back-channel logout, with true indicating support.
	// Note:  If omitted, the default value is false.
	BackchannelLogoutSupported bool `protobuf:"varint,47,opt,name=backchannel_logout_supported,json=backchannelLogoutSupported,proto3" json:"backchannel_logout_supported,omitempty"`
	// OPTIONAL. Boolean value specifying whether the authorization server can
	//   pass a sid (session ID) Claim in the Logout Token to identify the RP
	//   session with the OP. If supported, the sid Claim is also included in ID
	//   Tokens issued by the OP.
	// Note:  If omitted, the default value is false.
	BackchannelLogoutSessionSupported bool `protobuf:"varint,48,opt,name=backchannel_logout_session_supported,json=backchannelLogoutSessionSupported,proto3" json:"backchannel_logout_session_supported,omitempty"`
}

func (x *WellKnownResponse) Reset() {
	*x = WellKnownResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_well_known_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WellKnownResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WellKnownResponse) ProtoMessage() {}

func (x *WellKnownResponse) ProtoReflect() protoreflect.Message {
	mi := &file_well_known_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WellKnownResponse.ProtoReflect.Descriptor instead.
func (*WellKnownResponse) Descriptor() ([]byte, []int) {
	return file_well_known_proto_rawDescGZIP(), []int{1}
}

func (x *WellKnownResponse) GetIssuer() string {
	if x != nil {
		return x.Issuer
	}
	return ""
}

func (x *WellKnownResponse) GetAuthorizationEndpoint() string {
	if x != nil {
		return x.AuthorizationEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetTokenEndpoint() string {
	if x != nil {
		return x.TokenEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetJwksUri() string {
	if x != nil {
		return x.JwksUri
	}
	return ""
}

func (x *WellKnownResponse) GetRegistrationEndpoint() string {
	if x != nil {
		return x.RegistrationEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetScopesSupported() []string {
	if x != nil {
		return x.ScopesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetResponseTypesSupported() []string {
	if x != nil {
		return x.ResponseTypesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetResponseModesSupported() []string {
	if x != nil {
		return x.ResponseModesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetGrantTypesSupported() []string {
	if x != nil {
		return x.GrantTypesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetTokenEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.TokenEndpointAuthMethodsSupported
	}
	return nil
}

func (x *WellKnownResponse) GetTokenEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.TokenEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetServiceDocumentation() string {
	if x != nil {
		return x.ServiceDocumentation
	}
	return ""
}

func (x *WellKnownResponse) GetUiLocalesSupported() []string {
	if x != nil {
		return x.UiLocalesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetOpPolicyUri() string {
	if x != nil {
		return x.OpPolicyUri
	}
	return ""
}

func (x *WellKnownResponse) GetOpTosUri() string {
	if x != nil {
		return x.OpTosUri
	}
	return ""
}

func (x *WellKnownResponse) GetRevocationEndpoint() string {
	if x != nil {
		return x.RevocationEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetRevocationEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.RevocationEndpointAuthMethodsSupported
	}
	return nil
}

func (x *WellKnownResponse) GetRevocationEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.RevocationEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetIntrospectionEndpoint() string {
	if x != nil {
		return x.IntrospectionEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetIntrospectionEndpointAuthMethodsSupported() []string {
	if x != nil {
		return x.IntrospectionEndpointAuthMethodsSupported
	}
	return nil
}

func (x *WellKnownResponse) GetIntrospectionEndpointAuthSigningAlgValuesSupported() []string {
	if x != nil {
		return x.IntrospectionEndpointAuthSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetCodeChallengeMethodsSupported() []string {
	if x != nil {
		return x.CodeChallengeMethodsSupported
	}
	return nil
}

func (x *WellKnownResponse) GetSignedMetadata() string {
	if x != nil {
		return x.SignedMetadata
	}
	return ""
}

func (x *WellKnownResponse) GetUserinfoEndpoint() string {
	if x != nil {
		return x.UserinfoEndpoint
	}
	return ""
}

func (x *WellKnownResponse) GetAcrValuesSupported() []string {
	if x != nil {
		return x.AcrValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetSubjectTypesSupported() []string {
	if x != nil {
		return x.SubjectTypesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetIdTokenSigningAlgValuesSupported() []string {
	if x != nil {
		return x.IdTokenSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetIdTokenEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.IdTokenEncryptionAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetIdTokenEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.IdTokenEncryptionEncValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetUserinfoSigningAlgValuesSupported() []string {
	if x != nil {
		return x.UserinfoSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetUserinfoEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.UserinfoEncryptionAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetUserinfoEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.UserinfoEncryptionEncValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetRequestObjectSigningAlgValuesSupported() []string {
	if x != nil {
		return x.RequestObjectSigningAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetRequestObjectEncryptionAlgValuesSupported() []string {
	if x != nil {
		return x.RequestObjectEncryptionAlgValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetRequestObjectEncryptionEncValuesSupported() []string {
	if x != nil {
		return x.RequestObjectEncryptionEncValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetDisplayValuesSupported() []string {
	if x != nil {
		return x.DisplayValuesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetClaimTypesSupported() []string {
	if x != nil {
		return x.ClaimTypesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetClaimsSupported() []string {
	if x != nil {
		return x.ClaimsSupported
	}
	return nil
}

func (x *WellKnownResponse) GetClaimsLocalesSupported() []string {
	if x != nil {
		return x.ClaimsLocalesSupported
	}
	return nil
}

func (x *WellKnownResponse) GetClaimsParameterSupported() bool {
	if x != nil {
		return x.ClaimsParameterSupported
	}
	return false
}

func (x *WellKnownResponse) GetRequestParameterSupported() bool {
	if x != nil {
		return x.RequestParameterSupported
	}
	return false
}

func (x *WellKnownResponse) GetRequestUriParameterSupported() bool {
	if x != nil {
		return x.RequestUriParameterSupported
	}
	return false
}

func (x *WellKnownResponse) GetRequireRequestUriRegistration() bool {
	if x != nil {
		return x.RequireRequestUriRegistration
	}
	return false
}

func (x *WellKnownResponse) GetCheckSessionIframe() string {
	if x != nil {
		return x.CheckSessionIframe
	}
	return ""
}

func (x *WellKnownResponse) GetFrontchannelLogoutSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSupported
	}
	return false
}

func (x *WellKnownResponse) GetFrontchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.FrontchannelLogoutSessionSupported
	}
	return false
}

func (x *WellKnownResponse) GetBackchannelLogoutSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSupported
	}
	return false
}

func (x *WellKnownResponse) GetBackchannelLogoutSessionSupported() bool {
	if x != nil {
		return x.BackchannelLogoutSessionSupported
	}
	return false
}

var File_well_known_proto protoreflect.FileDescriptor

var file_well_known_proto_rawDesc = []byte{
	0x0a, 0x10, 0x77, 0x65, 0x6c, 0x6c, 0x5f, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x61, 0x75, 0x74, 0x68, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x40, 0x6c, 0x61, 0x62, 0x2e, 0x77, 0x65,
	0x61, 0x76, 0x65, 0x2e, 0x6e, 0x6c, 0x2f, 0x64, 0x65, 0x76, 0x6f, 0x70, 0x73, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2d, 0x69, 0x73, 0x74, 0x69, 0x6f, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x83, 0x19, 0x0a, 0x11, 0x57, 0x65, 0x6c, 0x6c,
	0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x12, 0x35, 0x0a, 0x16, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6a, 0x77, 0x6b, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6a, 0x77, 0x6b, 0x73, 0x55, 0x72, 0x69, 0x12, 0x33,
	0x0a, 0x15, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x63, 0x6f, 0x70, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38,
	0x0a, 0x18, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x16, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x72, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x13, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
	0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x30, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x2a, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x33,
	0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x14, 0x75, 0x69, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65,
	0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x12, 0x75, 0x69, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x70,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x0a, 0x6f, 0x70, 0x5f,
	0x74, 0x6f, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f,
	0x70, 0x54, 0x6f, 0x73, 0x55, 0x72, 0x69, 0x12, 0x2f, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5a, 0x0a, 0x2a, 0x72, 0x65, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f,
	0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x26, 0x72, 0x65,
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x6e, 0x0a, 0x35, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x2f, 0x72, 0x65, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x2d, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x29, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x74, 0x0a,
	0x38, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x32, 0x69, 0x6e, 0x74, 0x72, 0x6f, 0x73, 0x70, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x41, 0x75, 0x74, 0x68, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e,
	0x67, 0x41, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x5f, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x03, 0x28, 0x09, 0x52, 0x1d, 0x63,
	0x6f, 0x64, 0x65, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f,
	0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2b, 0x0a, 0x11, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x12, 0x30, 0x0a, 0x14, 0x61, 0x63, 0x72, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x12, 0x61, 0x63, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x17, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x1a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x25,
	0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67,
	0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x20, 0x69, 0x64, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a,
	0x28, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x23, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x12, 0x55, 0x0a, 0x28, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x1d, 0x20, 0x03, 0x28, 0x09, 0x52, 0x23, 0x69, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x25, 0x75,
	0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f,
	0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x21, 0x75, 0x73, 0x65, 0x72,
	0x69, 0x6e, 0x66, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a,
	0x28, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f,
	0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x24, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x28, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x20, 0x20, 0x03, 0x28, 0x09, 0x52, 0x24, 0x75, 0x73, 0x65, 0x72, 0x69, 0x6e, 0x66,
	0x6f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x63, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x5b, 0x0a,
	0x2b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x21, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x26, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a, 0x2e, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x61, 0x6c, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x22, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x29, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6c, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x61, 0x0a,
	0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x63, 0x5f, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18,
	0x23, 0x20, 0x03, 0x28, 0x09, 0x52, 0x29, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x63, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x18, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x16, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x32, 0x0a, 0x15, 0x63, 0x6c,
	0x61, 0x69, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x18, 0x25, 0x20, 0x03, 0x28, 0x09, 0x52, 0x13, 0x63, 0x6c, 0x61, 0x69, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x29,
	0x0a, 0x10, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x26, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x18, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x63, 0x6c, 0x61,
	0x69, 0x6d, 0x73, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x73, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x1a, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x45, 0x0a, 0x1f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x69,
	0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1c, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x55, 0x72, 0x69, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x20, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x72, 0x69, 0x5f,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x1d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x55, 0x72, 0x69, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x12, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x66, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x1d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x25, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x5f, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x22, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x62, 0x61,
	0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74,
	0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x1a, 0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67,
	0x6f, 0x75, 0x74, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x24,
	0x62, 0x61, 0x63, 0x6b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x21, 0x62, 0x61, 0x63, 0x6b,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x2a, 0xac, 0x02,
	0x0a, 0x0d, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1e, 0x0a, 0x1a, 0x57, 0x45, 0x4c, 0x4c, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x1a, 0x0a, 0x16, 0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x54,
	0x4f, 0x4b, 0x45, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x4a, 0x57, 0x4b, 0x53, 0x5f, 0x55, 0x52, 0x49, 0x10, 0x03, 0x12, 0x19, 0x0a,
	0x15, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e,
	0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x45, 0x52, 0x56,
	0x49, 0x43, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x50, 0x5f, 0x50, 0x4f, 0x4c, 0x49, 0x43, 0x59,
	0x5f, 0x55, 0x52, 0x49, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x50, 0x5f, 0x54, 0x4f, 0x53,
	0x5f, 0x55, 0x52, 0x49, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x56, 0x4f, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x08, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x52, 0x4f, 0x53, 0x50, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x15, 0x0a, 0x11, 0x55,
	0x53, 0x45, 0x52, 0x49, 0x4e, 0x46, 0x4f, 0x5f, 0x45, 0x4e, 0x44, 0x50, 0x4f, 0x49, 0x4e, 0x54,
	0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x10, 0x0b, 0x32, 0x9e, 0x02, 0x0a,
	0x09, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x81, 0x01, 0x0a, 0x1f, 0x47,
	0x65, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f, 0x70, 0x65, 0x6e, 0x49,
	0x44, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x57, 0x65,
	0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x2d, 0xca, 0x3e, 0x01, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x12, 0x21, 0x2f, 0x2e, 0x77,
	0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x64,
	0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x8c,
	0x01, 0x0a, 0x24, 0x47, 0x65, 0x74, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x4f,
	0x41, 0x75, 0x74, 0x68, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x57,
	0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x17, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x57, 0x65, 0x6c, 0x6c, 0x4b, 0x6e, 0x6f, 0x77, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0xca, 0x3e, 0x01, 0x2a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x29, 0x12, 0x27, 0x2f, 0x2e, 0x77, 0x65, 0x6c, 0x6c, 0x2d, 0x6b, 0x6e, 0x6f,
	0x77, 0x6e, 0x2f, 0x6f, 0x61, 0x75, 0x74, 0x68, 0x2d, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x42, 0x09, 0x5a,
	0x07, 0x2e, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_well_known_proto_rawDescOnce sync.Once
	file_well_known_proto_rawDescData = file_well_known_proto_rawDesc
)

func file_well_known_proto_rawDescGZIP() []byte {
	file_well_known_proto_rawDescOnce.Do(func() {
		file_well_known_proto_rawDescData = protoimpl.X.CompressGZIP(file_well_known_proto_rawDescData)
	})
	return file_well_known_proto_rawDescData
}

var file_well_known_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_well_known_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_well_known_proto_goTypes = []interface{}{
	(WellKnownType)(0),        // 0: auth.WellKnownType
	(*WellKnownRequest)(nil),  // 1: auth.WellKnownRequest
	(*WellKnownResponse)(nil), // 2: auth.WellKnownResponse
}
var file_well_known_proto_depIdxs = []int32{
	1, // 0: auth.WellKnown.GetWellKnownOpenIDConfiguration:input_type -> auth.WellKnownRequest
	1, // 1: auth.WellKnown.GetWellKnownOAuthAuthorizationServer:input_type -> auth.WellKnownRequest
	2, // 2: auth.WellKnown.GetWellKnownOpenIDConfiguration:output_type -> auth.WellKnownResponse
	2, // 3: auth.WellKnown.GetWellKnownOAuthAuthorizationServer:output_type -> auth.WellKnownResponse
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_well_known_proto_init() }
func file_well_known_proto_init() {
	if File_well_known_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_well_known_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_well_known_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WellKnownResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_well_known_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_well_known_proto_goTypes,
		DependencyIndexes: file_well_known_proto_depIdxs,
		EnumInfos:         file_well_known_proto_enumTypes,
		MessageInfos:      file_well_known_proto_msgTypes,
	}.Build()
	File_well_known_proto = out.File
	file_well_known_proto_rawDesc = nil
	file_well_known_proto_goTypes = nil
	file_well_known_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// WellKnownClient is the client API for WellKnown service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WellKnownClient interface {
	// Well known openID configuration
	// RFC 8615 - Well-Known Uniform Resource Identifiers (URIs) -
	//   https://tools.ietf.org/html/rfc8615
	// OpenID Connect Discovery 1.0 -
	//   https://openid.net/specs/openid-connect-discovery-1_0.html
	GetWellKnownOpenIDConfiguration(ctx context.Context, in *WellKnownRequest, opts ...grpc.CallOption) (*WellKnownResponse, error)
	GetWellKnownOAuthAuthorizationServer(ctx context.Context, in *WellKnownRequest, opts ...grpc.CallOption) (*WellKnownResponse, error)
}

type wellKnownClient struct {
	cc grpc.ClientConnInterface
}

func NewWellKnownClient(cc grpc.ClientConnInterface) WellKnownClient {
	return &wellKnownClient{cc}
}

func (c *wellKnownClient) GetWellKnownOpenIDConfiguration(ctx context.Context, in *WellKnownRequest, opts ...grpc.CallOption) (*WellKnownResponse, error) {
	out := new(WellKnownResponse)
	err := c.cc.Invoke(ctx, "/auth.WellKnown/GetWellKnownOpenIDConfiguration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wellKnownClient) GetWellKnownOAuthAuthorizationServer(ctx context.Context, in *WellKnownRequest, opts ...grpc.CallOption) (*WellKnownResponse, error) {
	out := new(WellKnownResponse)
	err := c.cc.Invoke(ctx, "/auth.WellKnown/GetWellKnownOAuthAuthorizationServer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WellKnownServer is the server API for WellKnown service.
type WellKnownServer interface {
	// Well known openID configuration
	// RFC 8615 - Well-Known Uniform Resource Identifiers (URIs) -
	//   https://tools.ietf.org/html/rfc8615
	// OpenID Connect Discovery 1.0 -
	//   https://openid.net/specs/openid-connect-discovery-1_0.html
	GetWellKnownOpenIDConfiguration(context.Context, *WellKnownRequest) (*WellKnownResponse, error)
	GetWellKnownOAuthAuthorizationServer(context.Context, *WellKnownRequest) (*WellKnownResponse, error)
}

// UnimplementedWellKnownServer can be embedded to have forward compatible implementations.
type UnimplementedWellKnownServer struct {
}

func (*UnimplementedWellKnownServer) GetWellKnownOpenIDConfiguration(context.Context, *WellKnownRequest) (*WellKnownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWellKnownOpenIDConfiguration not implemented")
}
func (*UnimplementedWellKnownServer) GetWellKnownOAuthAuthorizationServer(context.Context, *WellKnownRequest) (*WellKnownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWellKnownOAuthAuthorizationServer not implemented")
}

func RegisterWellKnownServer(s *grpc.Server, srv WellKnownServer) {
	s.RegisterService(&_WellKnown_serviceDesc, srv)
}

func _WellKnown_GetWellKnownOpenIDConfiguration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WellKnownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WellKnownServer).GetWellKnownOpenIDConfiguration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.WellKnown/GetWellKnownOpenIDConfiguration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WellKnownServer).GetWellKnownOpenIDConfiguration(ctx, req.(*WellKnownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WellKnown_GetWellKnownOAuthAuthorizationServer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WellKnownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WellKnownServer).GetWellKnownOAuthAuthorizationServer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/auth.WellKnown/GetWellKnownOAuthAuthorizationServer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WellKnownServer).GetWellKnownOAuthAuthorizationServer(ctx, req.(*WellKnownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WellKnown_serviceDesc = grpc.ServiceDesc{
	ServiceName: "auth.WellKnown",
	HandlerType: (*WellKnownServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWellKnownOpenIDConfiguration",
			Handler:    _WellKnown_GetWellKnownOpenIDConfiguration_Handler,
		},
		{
			MethodName: "GetWellKnownOAuthAuthorizationServer",
			Handler:    _WellKnown_GetWellKnownOAuthAuthorizationServer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "well_known.proto",
}
