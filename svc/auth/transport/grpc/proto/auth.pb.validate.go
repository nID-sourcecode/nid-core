// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auth.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _auth_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on AuthorizeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AuthorizeRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Scope

	// no validation rules for ResponseType

	// no validation rules for ClientId

	// no validation rules for RedirectUri

	// no validation rules for Audience

	// no validation rules for OptionalScopes

	return nil
}

// AuthorizeRequestValidationError is the validation error returned by
// AuthorizeRequest.Validate if the designated constraints aren't met.
type AuthorizeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeRequestValidationError) ErrorName() string { return "AuthorizeRequestValidationError" }

// Error satisfies the builtin error interface
func (e AuthorizeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeRequestValidationError{}

// Validate checks the field values on AuthorizeHeadlessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AuthorizeHeadlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ResponseType

	// no validation rules for ClientId

	// no validation rules for RedirectUri

	// no validation rules for Audience

	// no validation rules for QueryModelJson

	// no validation rules for QueryModelPath

	return nil
}

// AuthorizeHeadlessRequestValidationError is the validation error returned by
// AuthorizeHeadlessRequest.Validate if the designated constraints aren't met.
type AuthorizeHeadlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorizeHeadlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorizeHeadlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorizeHeadlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorizeHeadlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorizeHeadlessRequestValidationError) ErrorName() string {
	return "AuthorizeHeadlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AuthorizeHeadlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthorizeHeadlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorizeHeadlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorizeHeadlessRequestValidationError{}

// Validate checks the field values on SessionRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SessionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	return nil
}

// SessionRequestValidationError is the validation error returned by
// SessionRequest.Validate if the designated constraints aren't met.
type SessionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionRequestValidationError) ErrorName() string { return "SessionRequestValidationError" }

// Error satisfies the builtin error interface
func (e SessionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionRequestValidationError{}

// Validate checks the field values on SessionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SessionResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for State

	if v, ok := interface{}(m.GetClient()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionResponseValidationError{
				field:  "Client",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetAudience()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SessionResponseValidationError{
				field:  "Audience",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetRequiredAccessModels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionResponseValidationError{
					field:  fmt.Sprintf("RequiredAccessModels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOptionalAccessModels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionResponseValidationError{
					field:  fmt.Sprintf("OptionalAccessModels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAcceptedAccessModels() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SessionResponseValidationError{
					field:  fmt.Sprintf("AcceptedAccessModels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// SessionResponseValidationError is the validation error returned by
// SessionResponse.Validate if the designated constraints aren't met.
type SessionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionResponseValidationError) ErrorName() string { return "SessionResponseValidationError" }

// Error satisfies the builtin error interface
func (e SessionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionResponseValidationError{}

// Validate checks the field values on AcceptRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AcceptRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	return nil
}

// AcceptRequestValidationError is the validation error returned by
// AcceptRequest.Validate if the designated constraints aren't met.
type AcceptRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AcceptRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AcceptRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AcceptRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AcceptRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AcceptRequestValidationError) ErrorName() string { return "AcceptRequestValidationError" }

// Error satisfies the builtin error interface
func (e AcceptRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAcceptRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AcceptRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AcceptRequestValidationError{}

// Validate checks the field values on StatusResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *StatusResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for State

	return nil
}

// StatusResponseValidationError is the validation error returned by
// StatusResponse.Validate if the designated constraints aren't met.
type StatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StatusResponseValidationError) ErrorName() string { return "StatusResponseValidationError" }

// Error satisfies the builtin error interface
func (e StatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StatusResponseValidationError{}

// Validate checks the field values on AccessModel with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AccessModel) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Hash

	// no validation rules for Description

	return nil
}

// AccessModelValidationError is the validation error returned by
// AccessModel.Validate if the designated constraints aren't met.
type AccessModelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessModelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessModelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessModelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessModelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessModelValidationError) ErrorName() string { return "AccessModelValidationError" }

// Error satisfies the builtin error interface
func (e AccessModelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessModel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessModelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessModelValidationError{}

// Validate checks the field values on Client with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Client) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Logo

	// no validation rules for Icon

	// no validation rules for Color

	return nil
}

// ClientValidationError is the validation error returned by Client.Validate if
// the designated constraints aren't met.
type ClientValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClientValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClientValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClientValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClientValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClientValidationError) ErrorName() string { return "ClientValidationError" }

// Error satisfies the builtin error interface
func (e ClientValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClient.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClientValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClientValidationError{}

// Validate checks the field values on Audience with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Audience) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Audience

	// no validation rules for Namespace

	return nil
}

// AudienceValidationError is the validation error returned by
// Audience.Validate if the designated constraints aren't met.
type AudienceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AudienceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AudienceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AudienceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AudienceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AudienceValidationError) ErrorName() string { return "AudienceValidationError" }

// Error satisfies the builtin error interface
func (e AudienceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAudience.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AudienceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AudienceValidationError{}

// Validate checks the field values on TokenClientFlowRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *TokenClientFlowRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _TokenClientFlowRequest_GrantType_InLookup[m.GetGrantType()]; !ok {
		return TokenClientFlowRequestValidationError{
			field:  "GrantType",
			reason: "value must be in list [client_credentials]",
		}
	}

	// no validation rules for Scope

	// no validation rules for Audience

	return nil
}

// TokenClientFlowRequestValidationError is the validation error returned by
// TokenClientFlowRequest.Validate if the designated constraints aren't met.
type TokenClientFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenClientFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenClientFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenClientFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenClientFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenClientFlowRequestValidationError) ErrorName() string {
	return "TokenClientFlowRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TokenClientFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenClientFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenClientFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenClientFlowRequestValidationError{}

var _TokenClientFlowRequest_GrantType_InLookup = map[string]struct{}{
	"client_credentials": {},
}

// Validate checks the field values on TokenRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _TokenRequest_GrantType_InLookup[m.GetGrantType()]; !ok {
		return TokenRequestValidationError{
			field:  "GrantType",
			reason: "value must be in list [authorization_code refresh_token]",
		}
	}

	switch m.TypeValue.(type) {

	case *TokenRequest_AuthorizationCode:

		if utf8.RuneCountInString(m.GetAuthorizationCode()) < 1 {
			return TokenRequestValidationError{
				field:  "AuthorizationCode",
				reason: "value length must be at least 1 runes",
			}
		}

	case *TokenRequest_RefreshToken:

		if utf8.RuneCountInString(m.GetRefreshToken()) < 1 {
			return TokenRequestValidationError{
				field:  "RefreshToken",
				reason: "value length must be at least 1 runes",
			}
		}

	default:
		return TokenRequestValidationError{
			field:  "TypeValue",
			reason: "value is required",
		}

	}

	return nil
}

// TokenRequestValidationError is the validation error returned by
// TokenRequest.Validate if the designated constraints aren't met.
type TokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenRequestValidationError) ErrorName() string { return "TokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e TokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenRequestValidationError{}

var _TokenRequest_GrantType_InLookup = map[string]struct{}{
	"authorization_code": {},
	"refresh_token":      {},
}

// Validate checks the field values on SessionAuthorization with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SessionAuthorization) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FinaliseToken

	return nil
}

// SessionAuthorizationValidationError is the validation error returned by
// SessionAuthorization.Validate if the designated constraints aren't met.
type SessionAuthorizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SessionAuthorizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SessionAuthorizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SessionAuthorizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SessionAuthorizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SessionAuthorizationValidationError) ErrorName() string {
	return "SessionAuthorizationValidationError"
}

// Error satisfies the builtin error interface
func (e SessionAuthorizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSessionAuthorization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SessionAuthorizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SessionAuthorizationValidationError{}

// Validate checks the field values on FinaliseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FinaliseRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for SessionId

	// no validation rules for SessionFinaliseToken

	return nil
}

// FinaliseRequestValidationError is the validation error returned by
// FinaliseRequest.Validate if the designated constraints aren't met.
type FinaliseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinaliseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinaliseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinaliseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinaliseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinaliseRequestValidationError) ErrorName() string { return "FinaliseRequestValidationError" }

// Error satisfies the builtin error interface
func (e FinaliseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinaliseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinaliseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinaliseRequestValidationError{}

// Validate checks the field values on FinaliseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *FinaliseResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RedirectLocation

	return nil
}

// FinaliseResponseValidationError is the validation error returned by
// FinaliseResponse.Validate if the designated constraints aren't met.
type FinaliseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FinaliseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FinaliseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FinaliseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FinaliseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FinaliseResponseValidationError) ErrorName() string { return "FinaliseResponseValidationError" }

// Error satisfies the builtin error interface
func (e FinaliseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFinaliseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FinaliseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FinaliseResponseValidationError{}

// Validate checks the field values on TokenResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *TokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AccessToken

	// no validation rules for RefreshToken

	// no validation rules for TokenType

	return nil
}

// TokenResponseValidationError is the validation error returned by
// TokenResponse.Validate if the designated constraints aren't met.
type TokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TokenResponseValidationError) ErrorName() string { return "TokenResponseValidationError" }

// Error satisfies the builtin error interface
func (e TokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TokenResponseValidationError{}

// Validate checks the field values on AccessModelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AccessModelRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Audience

	// no validation rules for QueryModelJson

	// no validation rules for ScopeName

	// no validation rules for Description

	return nil
}

// AccessModelRequestValidationError is the validation error returned by
// AccessModelRequest.Validate if the designated constraints aren't met.
type AccessModelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AccessModelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AccessModelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AccessModelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AccessModelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AccessModelRequestValidationError) ErrorName() string {
	return "AccessModelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AccessModelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAccessModelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AccessModelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AccessModelRequestValidationError{}

// Validate checks the field values on SwapTokenRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SwapTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetCurrentToken()) < 1 {
		return SwapTokenRequestValidationError{
			field:  "CurrentToken",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetQuery()) < 1 {
		return SwapTokenRequestValidationError{
			field:  "Query",
			reason: "value length must be at least 1 runes",
		}
	}

	if utf8.RuneCountInString(m.GetAudience()) < 1 {
		return SwapTokenRequestValidationError{
			field:  "Audience",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// SwapTokenRequestValidationError is the validation error returned by
// SwapTokenRequest.Validate if the designated constraints aren't met.
type SwapTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwapTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwapTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwapTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwapTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwapTokenRequestValidationError) ErrorName() string { return "SwapTokenRequestValidationError" }

// Error satisfies the builtin error interface
func (e SwapTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwapTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwapTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwapTokenRequestValidationError{}
