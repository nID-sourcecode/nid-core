syntax = "proto3";
package auth;

import "google/api/annotations.proto";
import "google/protobuf/descriptor.proto";
import "lab.weave.nl/devops/proto-istio-auth-generator/proto/scope.proto";
import "validate/validate.proto";

option go_package = ".;proto";

enum WellKnownType {
  // OAuth 2.0 Authorization Server Metadata -
  // https://tools.ietf.org/html/rfc8414

  WELLKNOWN_TYPE_UNSPECIFIED = 0;

  // REQUIRED. URL of the authorization server's authorization endpoint
  //   [RFC6749] [OpenID.Core].
  AUTHORIZATION_ENDPOINT = 1;

  // COMPLEX. URL of the authorization server's token endpoint [RFC6749]
  //   [OpenID.Core].
  // Note:  This is REQUIRED unless only the implicit grant type is supported.
  TOKEN_ENDPOINT = 2;

  // Note:  The referenced document contains the signing key(s) the client uses
  //   to validate signatures from the authorization server. This URL MUST use
  //   the "https" scheme. The JWK Set MAY also contain the server's encryption
  //   key or keys, which are used by clients to encrypt requests to the server.
  //   When both signing and encryption keys are made available, a "use" (public
  //   key use) parameter value is REQUIRED for all keys in the referenced JWK
  //   Set to indicate each key's intended usage.
  JWKS_URI = 3;

  // RECOMMENDED. URL of the authorization server's OAuth 2.0 Dynamic Client
  //   Registration endpoint [RFC7591] [OpenID.Registration].
  REGISTRATION_ENDPOINT = 4;

  // OPTIONAL. URL of a page containing human-readable information that
  //   developers might want or need to know when using the authorization
  //   server.
  // Note:  In particular, if the authorization server does not support Dynamic
  //   Client Registration, then information on how to register clients needs to
  //   be provided in this documentation.
  SERVICE_DOCUMENTATION = 5;

  // OPTIONAL. URL that the authorization server provides to the person
  //   registering the client to read about the authorization server's
  //   requirements on how the client can use the data provided by the
  //   authorization server.
  // Note:  The registration process SHOULD display this URL to the person
  //   registering the client if it is given. As described in Section 5, despite
  //   the identifier "op_policy_uri" appearing to be OpenID-specific, its usage
  //   in this specification is actually referring to a general OAuth 2.0
  //   feature that is not specific to OpenID Connect.
  OP_POLICY_URI = 6;

  // OPTIONAL. URL that the authorization server provides to the person
  //   registering the client to read about the authorization server's terms of
  //   service.
  // Note:  The registration process SHOULD display this URL to the person
  //   registering the client if it is given. As described in Section 5, despite
  //   the identifier "op_tos_uri", appearing to be OpenID-specific, its usage
  //   in this specification is actually referring to a general OAuth 2.0
  //   feature that is not specific to OpenID Connect.
  OP_TOS_URI = 7;

  // OPTIONAL. URL of the authorization server's OAuth 2.0 revocation endpoint
  //   [RFC7009].
  REVOCATION_ENDPOINT = 8;

  // OPTIONAL. URL of the authorization server's OAuth 2.0 introspection
  //   endpoint [RFC7662].
  INTROSPECTION_ENDPOINT = 9;

  // OpenID Connect Discovery 1.0 incorporating errata set 1 -
  //   https://openid.net/specs/openid-connect-discovery-1_0.html

  // RECOMMENDED. URL of the authorization server's UserInfo Endpoint
  //   [OpenID.Core].
  // Note:  This URL MUST use the https scheme and MAY contain port, path, and
  //   query parameter components.
  USERINFO_ENDPOINT = 10;

  // OpenID Connect Session Management 1.0 - draft 30 -
  //   https://openid.net/specs/openid-connect-session-1_0.html

  // OPTIONAL. URL of an authorization server iframe that supports cross-origin
  //   communications for session state information with the RP Client, using
  //   the HTML5 postMessage API.
  // Note:  This URL MUST use the https scheme and MAY contain port, path, and
  //   query parameter components. The page is loaded from an invisible iframe
  //   embedded in an RP page so that it can run in the authorization server's
  //   security context. It accepts postMessage requests from the relevant RP
  //   iframe and uses postMessage to post back the login status of the End-User
  //   at the OP.
  CHECK_SESSION_IFRAME = 11;
}


service WellKnown {
  // Well known openID configuration
  // RFC 8615 - Well-Known Uniform Resource Identifiers (URIs) -
  //   https://tools.ietf.org/html/rfc8615
  // OpenID Connect Discovery 1.0 -
  //   https://openid.net/specs/openid-connect-discovery-1_0.html
  rpc GetWellKnownOpenIDConfiguration(WellKnownRequest)
      returns (WellKnownResponse) {
    option (scopes.scope) = "*";
    option (google.api.http) = {
      get: "/.well-known/openid-configuration"
    };
  }

  rpc GetWellKnownOAuthAuthorizationServer(WellKnownRequest)
      returns (WellKnownResponse) {
    option (scopes.scope) = "*";
    option (google.api.http) = {
      get: "/.well-known/oauth-authorization-server"
    };
  }
}

message WellKnownRequest {

}

message WellKnownResponse {
  // OAuth 2.0 Authorization Server Metadata -
  //   https://tools.ietf.org/html/rfc8414

  // REQUIRED. The authorization server's issuer identifier, which is a URL that
  //   uses the "https" scheme and has no query or fragment components.
  // Note:  Authorization server metadata is published at a location that is
  //   ".well-known" according to RFC 5785 [RFC5785] derived from this issuer
  //   identifier, as described in Section 3. The issuer identifier is used to
  //   prevent authorization server mix- up attacks, as described in "OAuth 2.0
  //   Mix-Up Mitigation" [MIX-UP].
  string issuer = 1;

  // REQUIRED. URL of the authorization server's authorization endpoint
  //   [RFC6749] [OpenID.Core].
  string authorization_endpoint = 2;

  // COMPLEX. URL of the authorization server's token endpoint [RFC6749]
  //   [OpenID.Core].
  // Note:  This is REQUIRED unless only the implicit grant type is supported.
  string token_endpoint = 3;

  // REQUIRED. URL of the authorization server's JWK Set [JWK] document.
  // Note:  The referenced document contains the signing key(s) the client uses
  //   to validate signatures from the authorization server. This URL MUST use
  //   the "https" scheme. The JWK Set MAY also contain the server's encryption
  //   key or keys, which are used by clients to encrypt requests to the server.
  //   When both signing and encryption keys are made available, a "use" (public
  //   key use) parameter value is REQUIRED for all keys in the referenced JWK
  //   Set to indicate each key's intended usage.
  string jwks_uri = 4;

  // RECOMMENDED. URL of the authorization server's OAuth 2.0 Dynamic Client
  //   Registration endpoint [RFC7591] [OpenID.Registration].
  string registration_endpoint = 5;

  // RECOMMENDED. List of the OAuth 2.0 [RFC6749] "scope" values that this
  //   authorization server supports.
  // Note:  Servers MAY choose not to advertise some supported scope values even
  //   when this parameter is used.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string scopes_supported = 6;

  // REQUIRED. List of the OAuth 2.0 "response_type" values that this
  //   authorization server supports.
  // Note:  The array values used are the same as those used with the
  //   "response_types" parameter defined by "OAuth 2.0 Dynamic Client
  //   Registration Protocol" [RFC7591]. Dynamic OpenID Providers MUST support
  //   the code, id_token, and the token id_token Response Type values
  //   [OpenID.Core].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string response_types_supported = 7;

  // OPTIONAL. List of the OAuth 2.0 "response_mode" values that this
  //   authorization server supports, as specified in "OAuth 2.0 Multiple
  //   Response Type Encoding Practices" [OAuth.Responses].
  // Note:  If omitted, the default is "["query", "fragment"]". The response
  //   mode value "form_post" is also defined in "OAuth 2.0 Form Post Response
  //   Mode" [OAuth.Post].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string response_modes_supported = 8;

  // OPTIONAL. List of the OAuth 2.0 grant type values that this authorization
  //   server supports.
  // Note:  The array values used are the same as those used with the
  //   "grant_types" parameter defined by "OAuth 2.0 Dynamic Client Registration
  //   Protocol" [RFC7591]. If omitted, the default value is
  //   "["authorization_code", "implicit"]".
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string grant_types_supported = 9;

  // OPTIONAL. List of client authentication methods supported by this token
  //   endpoint.
  // Note:  Client authentication method values are used in the
  //   "token_endpoint_auth_method" parameter defined in Section 2 of [RFC7591].
  //   The options are client_secret_post, client_secret_basic,
  //   client_secret_jwt, and private_key_jwt, as described in Section 9 of
  //   OpenID Connect Core 1.0 [OpenID.Core]. Other authentication methods MAY
  //   be defined by extensions. If omitted, the default is
  //   "client_secret_basic" -- the HTTP Basic Authentication Scheme specified
  //   in Section 2.3.1 of OAuth 2.0 [RFC6749].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string token_endpoint_auth_methods_supported = 10;

  // OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
  //   the token endpoint for the signature on the JWT [JWT] used to
  //   authenticate the client at the token endpoint for the "private_key_jwt"
  //   and "client_secret_jwt" authentication methods.
  // Note:  This metadata entry MUST be present if either of these
  //   authentication methods are specified in the
  //   "token_endpoint_auth_methods_supported" entry. No default algorithms are
  //   implied if this entry is omitted. Servers SHOULD support "RS256". The
  //   value "none" MUST NOT be used.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string token_endpoint_auth_signing_alg_values_supported = 11;

  // OPTIONAL. URL of a page containing human-readable information that
  //   developers might want or need to know when using the authorization
  //   server.
  // Note:  In particular, if the authorization server does not support Dynamic
  //   Client Registration, then information on how to register clients needs to
  //   be provided in this documentation.
  string service_documentation = 12;

  // OPTIONAL. Languages and scripts supported for the user interface,
  //   represented as a JSON array of language tag values from BCP 47 [RFC5646].
  // Note:  If omitted, the set of supported languages and scripts is
  //   unspecified.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string ui_locales_supported = 13;

  // OPTIONAL. URL that the authorization server provides to the person
  //   registering the client to read about the authorization server's
  //   requirements on how the client can use the data provided by the
  //   authorization server.
  // Note:  The registration process SHOULD display this URL to the person
  //   registering the client if it is given. As described in Section 5, despite
  //   the identifier "op_policy_uri" appearing to be OpenID-specific, its usage
  //   in this specification is actually referring to a general OAuth 2.0
  //   feature that is not specific to OpenID Connect.
  string op_policy_uri = 14;

  // OPTIONAL. URL that the authorization server provides to the person
  //   registering the client to read about the authorization server's terms of
  //   service.
  // Note:  The registration process SHOULD display this URL to the person
  //   registering the client if it is given. As described in Section 5, despite
  //   the identifier "op_tos_uri", appearing to be OpenID-specific, its usage
  //   in this specification is actually referring to a general OAuth 2.0
  //   feature that is not specific to OpenID Connect.
  string op_tos_uri = 15;

  // OPTIONAL. URL of the authorization server's OAuth 2.0 revocation endpoint
  //   [RFC7009].
  string revocation_endpoint = 16;

  // OPTIONAL. List of client authentication methods supported by this
  //   revocation endpoint.
  // Note:  The valid client authentication method values are those registered
  //   in the IANA "OAuth Token Endpoint Authentication Methods" registry
  //   [IANA.OAuth.Parameters]. If omitted, the default is "client_secret_basic"
  //   -- the HTTP Basic Authentication Scheme specified in Section 2.3.1 of
  //   OAuth 2.0 [RFC6749].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string revocation_endpoint_auth_methods_supported = 17;

  // OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
  //   the revocation endpoint for the signature on the JWT [JWT] used to
  //   authenticate the client at the revocation endpoint for the
  //   "private_key_jwt" and "client_secret_jwt" authentication methods.
  // Note:  This metadata entry MUST be present if either of these
  //   authentication methods are specified in the
  //   "revocation_endpoint_auth_methods_supported" entry. No default algorithms
  //   are implied if this entry is omitted. The value "none" MUST NOT be used.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string revocation_endpoint_auth_signing_alg_values_supported = 18;

  // OPTIONAL. URL of the authorization server's OAuth 2.0 introspection
  //   endpoint [RFC7662].
  string introspection_endpoint = 19;

  // OPTIONAL. List of client authentication methods supported by this
  //   introspection endpoint.
  // Note:  The valid client authentication method values are those registered
  //   in the IANA "OAuth Token Endpoint Authentication Methods" registry
  //   [IANA.OAuth.Parameters] or those registered in the IANA "OAuth Access
  //   Token Types" registry [IANA.OAuth.Parameters]. (These values are and will
  //   remain distinct, due to Section 7.2.) If omitted, the set of supported
  //   authentication methods MUST be determined by other means.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string introspection_endpoint_auth_methods_supported = 20;

  // OPTIONAL. List of the JWS signing algorithms ("alg" values) supported by
  //   the introspection endpoint for the signature on the JWT [JWT] used to
  //   authenticate the client at the introspection endpoint for the
  //   "private_key_jwt" and "client_secret_jwt" authentication methods.
  // Note:  This metadata entry MUST be present if either of these
  //   authentication methods are specified in the
  //   "introspection_endpoint_auth_methods_supported" entry. No default
  //   algorithms are implied if this entry is omitted. The value "none" MUST
  //   NOT be used.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string introspection_endpoint_auth_signing_alg_values_supported = 21;

  // OPTIONAL. List of Proof Key for Code Exchange (PKCE) [RFC7636] code
  //   challenge methods supported by this authorization server.
  // Note:  Code challenge method values are used in the "code_challenge_method"
  //   parameter defined in Section 4.3 of [RFC7636]. The valid code challenge
  //   method values are those registered in the IANA "PKCE Code Challenge
  //   Methods" registry [IANA.OAuth.Parameters]. If omitted, the authorization
  //   server does not support PKCE.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string code_challenge_methods_supported = 22;

  // OPTIONAL. A JWT containing metadata values about the authorization server
  //   as claims.
  // Note:  This is a string value consisting of the entire signed JWT. A
  //   "signed_metadata" metadata value SHOULD NOT appear as a claim in the JWT.
  string signed_metadata = 23;

  // OpenID Connect Discovery 1.0 incorporating errata set 1 -
  //   https://openid.net/specs/openid-connect-discovery-1_0.html

  // RECOMMENDED. URL of the authorization server's UserInfo Endpoint
  //   [OpenID.Core].
  // Note:  This URL MUST use the https scheme and MAY contain port, path, and
  //   query parameter components.
  string userinfo_endpoint = 24;

  // OPTIONAL. List of the Authentication Context Class References that this
  //   authorization server supports.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string acr_values_supported = 25;

  // REQUIRED. List of the Subject Identifier types that this authorization
  //   server supports.
  // Note:  Valid types include pairwise and public.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string subject_types_supported = 26;

  // REQUIRED. List of the JWS signing algorithms (alg values) supported by the
  //   authorization server for the ID Token to encode the Claims in a JWT
  //   [JWT].
  // Note:  The algorithm RS256 MUST be included. The value none MAY be
  //   supported, but MUST NOT be used unless the Response Type used returns no
  //   ID Token from the Authorization Endpoint (such as when using the
  //   Authorization Code Flow).
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string id_token_signing_alg_values_supported = 27;

  // OPTIONAL. List of the JWE encryption algorithms (alg values) supported by
  //   the authorization server for the ID Token to encode the Claims in a JWT
  //   [JWT].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string id_token_encryption_alg_values_supported = 28;

  // OPTIONAL. List of the JWE encryption algorithms (enc values) supported by
  //   the authorization server for the ID Token to encode the Claims in a JWT
  //   [JWT].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string id_token_encryption_enc_values_supported = 29;

  // OPTIONAL. List of the JWS [JWS] signing algorithms (alg values) [JWA]
  //   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
  // Note:  The value none MAY be included.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string userinfo_signing_alg_values_supported = 30;

  // OPTIONAL. List of the JWE [JWE] encryption algorithms (alg values) [JWA]
  //   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string userinfo_encryption_alg_values_supported = 31;

  // OPTIONAL. List of the JWE encryption algorithms (enc values) [JWA]
  //   supported by the UserInfo Endpoint to encode the Claims in a JWT [JWT].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string userinfo_encryption_enc_values_supported = 32;

  // OPTIONAL. List of the JWS signing algorithms (alg values) supported by the
  //   authorization server for Request Objects, which are described in Section
  //   6.1 of OpenID Connect Core 1.0 [OpenID.Core].
  // Note:  These algorithms are used both when the Request Object is passed by
  //   value (using the request parameter) and when it is passed by reference
  //   (using the request_uri parameter). Servers SHOULD support none and RS256.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string request_object_signing_alg_values_supported = 33;

  // OPTIONAL. List of the JWE encryption algorithms (alg values) supported by
  //   the authorization server for Request Objects.
  // Note:  These algorithms are used both when the Request Object is passed by
  //   value and when it is passed by reference.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string request_object_encryption_alg_values_supported = 34;

  // OPTIONAL. List of the JWE encryption algorithms (enc values) supported by
  //   the authorization server for Request Objects.
  // Note:  These algorithms are used both when the Request Object is passed by
  //   value and when it is passed by reference.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string request_object_encryption_enc_values_supported = 35;

  // OPTIONAL. List of the display parameter values that the OpenID Provider
  //   supports.
  // Note:  These values are described in Section 3.1.2.1 of OpenID Connect Core
  //   1.0 [OpenID.Core].
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string display_values_supported = 36;

  // OPTIONAL. List of the Claim Types that the OpenID Provider supports.
  // Note:  These Claim Types are described in Section 5.6 of OpenID Connect
  //   Core 1.0 [OpenID.Core]. Values defined by this specification are normal,
  //   aggregated, and distributed. If omitted, the implementation supports only
  //   normal Claims.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string claim_types_supported = 37;

  // RECOMMENDED. List of the Claim Names of the Claims that the OpenID Provider
  //   MAY be able to supply values for.
  // Note:  Note that for privacy or other reasons, this might not be an
  //   exhaustive list.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string claims_supported = 38;

  // OPTIONAL. Languages and scripts supported for values in Claims being
  //   returned, represented as a JSON array of BCP47 [RFC5646] language tag
  //   values.
  // Note:  Not all languages and scripts are necessarily supported for all
  //   Claim values.
  // protolint:disable:next REPEATED_FIELD_NAMES_PLURALIZED
  repeated string claims_locales_supported = 39;

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   supports use of the claims parameter, with true indicating support.
  // Note:  If omitted, the default value is false.
  bool claims_parameter_supported = 40;

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   supports use of the request parameter, with true indicating support.
  // Note:  If omitted, the default value is false.
  bool request_parameter_supported = 41;

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   supports use of the request_uri parameter, with true indicating support.
  // Note:  If omitted, the default value is true.
  bool request_uri_parameter_supported = 42;

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   requires any request_uri values used to be pre-registered using the
  //   request_uris registration parameter.
  // Note:  Pre-registration is REQUIRED when the value is true. If omitted, the
  //   default value is false.
  bool require_request_uri_registration = 43;

  // OpenID Connect Session Management 1.0 - draft 30 -
  //   https://openid.net/specs/openid-connect-session-1_0.html

  // OPTIONAL. URL of an authorization server iframe that supports cross-origin
  //   communications for session state information with the RP Client, using
  //   the HTML5 postMessage API.
  // Note:  This URL MUST use the https scheme and MAY contain port, path, and
  //   query parameter components. The page is loaded from an invisible iframe
  //   embedded in an RP page so that it can run in the authorization server's
  //   security context. It accepts postMessage requests from the relevant RP
  //   iframe and uses postMessage to post back the login status of the End-User
  //   at the OP.
  string check_session_iframe = 44;

  // OpenID Connect Front-Channel Logout 1.0 - draft 04 -
  //   https://openid.net/specs/openid-connect-frontchannel-1_0.html

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   supports HTTP-based logout, with true indicating support.
  // Note:  If omitted, the default value is false.
  bool frontchannel_logout_supported = 45;

  // OPTIONAL. Boolean value specifying whether the authorization server can
  //   pass iss (issuer) and sid (session ID) query parameters to identify the
  //   RP session with the authorization server when the frontchannel_logout_uri
  //   is used.
  // Note:  If supported, the sid Claim is also included in ID Tokens issued by
  //   the OP. If omitted, the default value is false.
  bool frontchannel_logout_session_supported = 46;

  // OpenID Connect Back-Channel Logout 1.0 - draft 06 -
  //   https://openid.net/specs/openid-connect-backchannel-1_0.html

  // OPTIONAL. Boolean value specifying whether the authorization server
  //   supports back-channel logout, with true indicating support.
  // Note:  If omitted, the default value is false.
  bool backchannel_logout_supported = 47;

  // OPTIONAL. Boolean value specifying whether the authorization server can
  //   pass a sid (session ID) Claim in the Logout Token to identify the RP
  //   session with the OP. If supported, the sid Claim is also included in ID
  //   Tokens issued by the OP.
  // Note:  If omitted, the default value is false.
  bool backchannel_logout_session_supported = 48;
}
