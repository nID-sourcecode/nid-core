// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	proto "github.com/nID-sourcecode/nid-core/svc/auth/transport/grpc/proto"
)

// AuthServer is an autogenerated mock type for the AuthServer type
type AuthServer struct {
	mock.Mock
}

// Accept provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Accept(_a0 context.Context, _a1 *proto.AcceptRequest) (*proto.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AcceptRequest) *proto.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AcceptRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Authorize provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Authorize(_a0 context.Context, _a1 *proto.AuthorizeRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AuthorizeRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AuthorizeRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Claim provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Claim(_a0 context.Context, _a1 *proto.SessionRequest) (*proto.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionRequest) *proto.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Finalise provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Finalise(_a0 context.Context, _a1 *proto.FinaliseRequest) (*proto.FinaliseResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.FinaliseResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.FinaliseRequest) *proto.FinaliseResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.FinaliseResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.FinaliseRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateSessionFinaliseToken provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) GenerateSessionFinaliseToken(_a0 context.Context, _a1 *proto.SessionRequest) (*proto.SessionAuthorization, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.SessionAuthorization
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionRequest) *proto.SessionAuthorization); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionAuthorization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionDetails provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) GetSessionDetails(_a0 context.Context, _a1 *proto.SessionRequest) (*proto.SessionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.SessionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionRequest) *proto.SessionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.SessionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterAccessModel provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) RegisterAccessModel(_a0 context.Context, _a1 *proto.AccessModelRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.AccessModelRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.AccessModelRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Reject provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Reject(_a0 context.Context, _a1 *proto.SessionRequest) (*emptypb.Empty, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *emptypb.Empty
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionRequest) *emptypb.Empty); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emptypb.Empty)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Status provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Status(_a0 context.Context, _a1 *proto.SessionRequest) (*proto.StatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.StatusResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SessionRequest) *proto.StatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.StatusResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SessionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapToken provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) SwapToken(_a0 context.Context, _a1 *proto.SwapTokenRequest) (*proto.TokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.SwapTokenRequest) *proto.TokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.SwapTokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Token provides a mock function with given fields: _a0, _a1
func (_m *AuthServer) Token(_a0 context.Context, _a1 *proto.TokenRequest) (*proto.TokenResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *proto.TokenResponse
	if rf, ok := ret.Get(0).(func(context.Context, *proto.TokenRequest) *proto.TokenResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proto.TokenResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *proto.TokenRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
