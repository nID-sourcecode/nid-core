// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
	"github.com/jinzhu/gorm/dialects/postgres"
)

// Consent Relational Model
type Consent struct {
	ID          uuid.UUID      `sql:"default:uuid_generate_v4()" gorm:"primary_key" json:"id"` // primary key
	AccessToken string         `json:"access_token"`
	Client      *Client        `json:"client"`
	ClientID    uuid.UUID      `gorm:"index:idx_consent_client_id" json:"client_id"`
	Description string         `json:"description"`
	Granted     *time.Time     `json:"granted"`
	Name        string         `json:"name"`
	Revoked     *time.Time     `json:"revoked"`
	Token       postgres.Jsonb `json:"token"`
	User        *User          `json:"user"`
	UserID      uuid.UUID      `gorm:"index:idx_consent_user_id" json:"user_id"`
	CreatedAt   time.Time      `json:"created_at"`
	DeletedAt   *time.Time     `json:"deleted_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Consent) TableName() string {
	return "consents"
}

// ConsentDB is the implementation of the storage interface for
// Consent.
type ConsentDB struct {
	Db *gorm.DB // Deprecated: Use ConsentDB.DB() instead.
}

// NewConsentDB creates a new storage type.
func NewConsentDB(db *gorm.DB) *ConsentDB {
	return &ConsentDB{Db: db}
}

// DB returns the underlying database.
func (m *ConsentDB) DB() interface{} {
	return m.Db
}

// TableName returns the table name of the associated model
//
// Deprecated: Use db.Model(Consent{}) instead.
func (m *ConsentDB) TableName() string {
	return "consents"
}

// CRUD Functions

// Get returns a single Consent as a Database Model
func (m *ConsentDB) Get(ctx context.Context, id uuid.UUID) (*Consent, error) {
	var native Consent
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Consent
func (m *ConsentDB) List(ctx context.Context) ([]*Consent, error) {
	var objs []*Consent
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ConsentDB) Add(ctx context.Context, model *Consent) error {
	err := m.Db.Create(model).Error
	if err != nil {
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ConsentDB) Update(ctx context.Context, model *Consent) error {
	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ConsentDB) Delete(ctx context.Context, id uuid.UUID) error {
	err := m.Db.Where("id = ?", id).Delete(&Consent{}).Error
	if err != nil {
		return err
	}

	return nil
}
