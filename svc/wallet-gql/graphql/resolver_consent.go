// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package graphql

import (
	"context"
	"fmt"
	"strings"

	"github.com/99designs/gqlgen/graphql"
	"github.com/gofrs/uuid"
	"github.com/google/go-cmp/cmp"
	"github.com/jinzhu/gorm"
	"github.com/pkg/errors"
	"github.com/nID-sourcecode/nid-core/svc/wallet-gql/auth"
	"github.com/nID-sourcecode/nid-core/svc/wallet-gql/models"
	generr "lab.weave.nl/weave/generator/pkg/errors"
	"lab.weave.nl/weave/generator/utils/sanitize"
	"lab.weave.nl/weave/generator/utils/sqlconv"
)

type consentResolver struct {
	*Resolver
	Hooks *CustomConsentHooks
}

var _ ConsentResolver = &consentResolver{nil, nil}

type customConsentHooks interface {
	AfterReadSetToken(ctx context.Context, db *gorm.DB, model *models.Consent) error
}

type CustomConsentHooks struct{ *Resolver }

var _ customConsentHooks = &CustomConsentHooks{nil}

func (r *queryResolver) constructFilterConsent(ctx context.Context, joins map[string]string) (filter string, values []interface{}, restrictedFields []string) {
	fieldCtx := graphql.GetFieldContext(ctx)
	filters := []string{fmt.Sprintf("/*path: %v*/ /*fallback*/false", fieldCtx.Path())}
	user := auth.GetUser(ctx)

	// Scope: 'api:access', Relation: HasMyUserID, UserIDField: UserID
	if auth.UserHasScope(ctx, "api:access") {
		filters = append(filters, "/*api:access HasMyUserID*/ \"consents\".\"user_id\" = ?")
		values = append(values, user.ID)
		restrictedFields = append(restrictedFields, "DeletedAt", "Unscoped")
	}

	return strings.Join(filters, " OR "), values, restrictedFields
}

func (r *queryResolver) readFilterConsent(ctx context.Context, filter *ConsentFilterInput, joins map[string]string) (*gorm.DB, error) {
	db := r.Resolver.DB.Model(&models.Consent{})

	for _, v := range joins {
		db = db.Joins(v)
	}

	filters, values, restrictedFields := r.constructFilterConsent(ctx, joins)
	db = db.Where(filters, values...)

	if filter != nil {
		for _, f := range restrictedFields {
			if filter.containsField(f) {
				return nil, fmt.Errorf("%w: %s", generr.ErrFieldAccessDenied, sanitize.GraphFieldName(f))
			}
		}
		expr, args := filter.parse()
		db = db.Where(expr, args...)
		if filter.Unscoped != nil && *filter.Unscoped {
			db = db.Unscoped()
		}
	}

	return db, nil
}

func (r *queryResolver) Consent(ctx context.Context, id uuid.UUID) (*models.Consent, error) {
	m := models.Consent{}
	db, err := r.readFilterConsent(ctx, nil, nil)
	if err != nil {
		return nil, err
	}
	err = db.Where(`"consents"."id" = ?`, id).First(&m).Error
	if err != nil {
		if gorm.IsRecordNotFoundError(err) {
			return nil, generr.ErrRecordNotFound
		}
		return nil, generr.WrapAsInternal(err, fmt.Sprintf("getting Consentrecord with id %s from db", id))
	}
	if err := r.Resolver.Consent().(*consentResolver).Hooks.AfterReadSetToken(ctx, db, &m); err != nil {
		return nil, errors.Wrap(err, "error in AfterReadSetToken")
	}
	return &m, nil
}

func (r *queryResolver) Consents(ctx context.Context, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) ([]*models.Consent, error) {
	var m []*models.Consent
	db, err := r.readFilterConsent(ctx, filter, nil)
	if err != nil {
		return nil, err
	}

	orderString, err := sqlconv.ParseOrderBy(ctx, orderBy, &order, &orderDirection)
	if err != nil {
		return nil, generr.WrapAsInternal(err, "parsing order by")
	}

	err = db.Limit(*limit).Offset(*offset).Order(orderString).Find(&m).Error
	if err != nil {
		return nil, generr.WrapAsInternal(err, "getting Consents from db")
	}
	return m, nil
}

func (r *consentResolver) Client(ctx context.Context, obj *models.Consent) (*models.Client, error) {
	return r.Query().Client(ctx, obj.ClientID)
}

func (r *consentResolver) ID(ctx context.Context, obj *models.Consent) (uuid.UUID, error) {
	return obj.ID, nil
}

func (r *consentResolver) User(ctx context.Context, obj *models.Consent) (*models.User, error) {
	return r.Query().User(ctx, obj.UserID)
}

var _ Directive = &consentResolver{nil, nil}

func (r *consentResolver) HasFieldAccess(ctx context.Context, obj interface{}, next graphql.Resolver) (interface{}, error) {
	model := castConsent(obj)
	if model == nil {
		return nil, generr.ErrAccessDenied
	}
	fieldName := graphql.GetFieldContext(ctx).Field.Name
	user := auth.GetUser(ctx)

	// Scope: 'api:access', Relation: HasMyUserID, UserIDField: UserID
	if auth.UserHasScope(ctx, "api:access") && cmp.Equal(&model.UserID, &user.ID) {
		if map[string]bool{
			"accessToken": true,
			"client":      true,
			"clientId":    true,
			"createdAt":   true,
			"description": true,
			"granted":     true,
			"id":          true,
			"name":        true,
			"revoked":     true,
			"token":       true,
			"updatedAt":   true,
			"user":        true,
			"userId":      true,
		}[fieldName] {
			return next(ctx)
		}
	}

	return nil, generr.ErrAccessDenied
}

func castConsent(obj interface{}) *models.Consent {
	switch res := obj.(type) {
	case **models.Consent:
		return *res
	case *models.Consent:
		return res
	case models.Consent:
		return &res
	default:
		return nil
	}
}
