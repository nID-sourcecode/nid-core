// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package graphql

import (
	"context"

	"lab.weave.nl/nid/nid-core/svc/wallet-gql/models"
)

func (t *CreateClient) ToModel(ctx context.Context, r *Resolver) (m models.Client, err error) {
	m.Color = t.Color
	m.ExtClientID = t.ExtClientID
	m.Icon = t.Icon
	m.Logo = t.Logo
	m.Name = t.Name
	return m, nil
}

func (t *CreateClient) containsField(field string) bool {
	switch field {
	}
	return false
}

func (t *UpdateClient) ToModel(ctx context.Context, r *Resolver) (m models.Client, err error) {
	if t.Color != nil {
		m.Color = *t.Color
	}
	if t.ExtClientID != nil {
		m.ExtClientID = *t.ExtClientID
	}
	if t.Icon != nil {
		m.Icon = *t.Icon
	}
	if t.Logo != nil {
		m.Logo = *t.Logo
	}
	if t.Name != nil {
		m.Name = *t.Name
	}
	return m, nil
}

func (t *UpdateClient) containsField(field string) bool {
	switch field {
	case "Color":
		if t.Color != nil {
			return true
		}
	case "ExtClientID":
		if t.ExtClientID != nil {
			return true
		}
	case "Icon":
		if t.Icon != nil {
			return true
		}
	case "Logo":
		if t.Logo != nil {
			return true
		}
	case "Name":
		if t.Name != nil {
			return true
		}
	}
	return false
}

func (t *CreateEmailAddress) ToModel(ctx context.Context, r *Resolver) (m models.EmailAddress, err error) {
	m.EmailAddress = t.EmailAddress
	if t.UserID != nil {
		m.UserID = *t.UserID
	}
	return m, nil
}

func (t *CreateEmailAddress) containsField(field string) bool {
	switch field {
	case "UserID":
		if t.UserID != nil {
			return true
		}
	}
	return false
}

func (t *UpdateEmailAddress) ToModel(ctx context.Context, r *Resolver) (m models.EmailAddress, err error) {
	if t.EmailAddress != nil {
		m.EmailAddress = *t.EmailAddress
	}
	if t.UserID != nil {
		m.UserID = *t.UserID
	}
	return m, nil
}

func (t *UpdateEmailAddress) containsField(field string) bool {
	switch field {
	case "EmailAddress":
		if t.EmailAddress != nil {
			return true
		}
	case "UserID":
		if t.UserID != nil {
			return true
		}
	}
	return false
}

func (t *CreatePhoneNumber) ToModel(ctx context.Context, r *Resolver) (m models.PhoneNumber, err error) {
	m.PhoneNumber = t.PhoneNumber
	if t.UserID != nil {
		m.UserID = *t.UserID
	}
	m.VerificationType = t.VerificationType
	return m, nil
}

func (t *CreatePhoneNumber) containsField(field string) bool {
	switch field {
	case "UserID":
		if t.UserID != nil {
			return true
		}
	}
	return false
}

func (t *UpdatePhoneNumber) ToModel(ctx context.Context, r *Resolver) (m models.PhoneNumber, err error) {
	if t.PhoneNumber != nil {
		m.PhoneNumber = *t.PhoneNumber
	}
	if t.UserID != nil {
		m.UserID = *t.UserID
	}
	if t.VerificationType != nil {
		m.VerificationType = *t.VerificationType
	}
	return m, nil
}

func (t *UpdatePhoneNumber) containsField(field string) bool {
	switch field {
	case "PhoneNumber":
		if t.PhoneNumber != nil {
			return true
		}
	case "UserID":
		if t.UserID != nil {
			return true
		}
	case "VerificationType":
		if t.VerificationType != nil {
			return true
		}
	}
	return false
}

func (t *CreateUser) ToModel(ctx context.Context, r *Resolver) (m models.User, err error) {
	m.Bsn = t.Bsn
	m.Email = t.Email
	if m.Password, err = r.User().(*userResolver).Hooks.MutatePassword(ctx, t.Password); err != nil {
		return models.User{}, err
	}
	m.Pseudonym = t.Pseudonym
	if t.Scopes != nil {
		m.Scopes = *t.Scopes
	}
	return m, nil
}

func (t *CreateUser) containsField(field string) bool {
	switch field {
	case "Scopes":
		if t.Scopes != nil {
			return true
		}
	}
	return false
}

func (t *UpdateUser) ToModel(ctx context.Context, r *Resolver) (m models.User, err error) {
	if t.Bsn != nil {
		m.Bsn = *t.Bsn
	}
	if t.Email != nil {
		m.Email = *t.Email
	}
	if t.Password != nil {
		if m.Password, err = r.User().(*userResolver).Hooks.MutatePassword(ctx, *t.Password); err != nil {
			return models.User{}, err
		}
	}
	if t.Pseudonym != nil {
		m.Pseudonym = *t.Pseudonym
	}
	if t.Scopes != nil {
		m.Scopes = *t.Scopes
	}
	return m, nil
}

func (t *UpdateUser) containsField(field string) bool {
	switch field {
	case "Bsn":
		if t.Bsn != nil {
			return true
		}
	case "Email":
		if t.Email != nil {
			return true
		}
	case "Password":
		if t.Password != nil {
			return true
		}
	case "Pseudonym":
		if t.Pseudonym != nil {
			return true
		}
	case "Scopes":
		if t.Scopes != nil {
			return true
		}
	}
	return false
}
