// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm/dialects/postgres"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	"lab.weave.nl/nid/nid-core/svc/wallet-gql/models"
	"lab.weave.nl/weave/generator/gen/scalars"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Client() ClientResolver
	Consent() ConsentResolver
	EmailAddress() EmailAddressResolver
	Mutation() MutationResolver
	PhoneNumber() PhoneNumberResolver
	Query() QueryResolver
	User() UserResolver
}

type DirectiveRoot struct {
	HasClientAccess       func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasConsentAccess      func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasEmailAddressAccess func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasPhoneNumberAccess  func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	HasUserAccess         func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	Client struct {
		Color       func(childComplexity int) int
		Consents    func(childComplexity int, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		ExtClientID func(childComplexity int) int
		ID          func(childComplexity int) int
		Icon        func(childComplexity int) int
		Logo        func(childComplexity int) int
		Name        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
	}

	Consent struct {
		AccessToken func(childComplexity int) int
		Client      func(childComplexity int) int
		ClientID    func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		DeletedAt   func(childComplexity int) int
		Description func(childComplexity int) int
		Granted     func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Revoked     func(childComplexity int) int
		Token       func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
		UserID      func(childComplexity int) int
	}

	EmailAddress struct {
		CreatedAt    func(childComplexity int) int
		DeletedAt    func(childComplexity int) int
		EmailAddress func(childComplexity int) int
		ID           func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
		User         func(childComplexity int) int
		UserID       func(childComplexity int) int
		Verified     func(childComplexity int) int
	}

	Mutation struct {
		CreateClient        func(childComplexity int, input CreateClient) int
		CreateEmailAddress  func(childComplexity int, input CreateEmailAddress) int
		CreateJwt           func(childComplexity int, email string, password string) int
		CreatePhoneNumber   func(childComplexity int, input CreatePhoneNumber) int
		CreateRevokeConsent func(childComplexity int, input CreateRevokeConsent) int
		CreateUser          func(childComplexity int, input CreateUser) int
		RefreshJwt          func(childComplexity int, token string) int
		UpdateClient        func(childComplexity int, id uuid.UUID, input UpdateClient) int
		UpdateEmailAddress  func(childComplexity int, id uuid.UUID, input UpdateEmailAddress) int
		UpdateMe            func(childComplexity int, input UpdateUser) int
		UpdatePhoneNumber   func(childComplexity int, id uuid.UUID, input UpdatePhoneNumber) int
		UpdateUser          func(childComplexity int, id uuid.UUID, input UpdateUser) int
	}

	PhoneNumber struct {
		CreatedAt        func(childComplexity int) int
		DeletedAt        func(childComplexity int) int
		ID               func(childComplexity int) int
		PhoneNumber      func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		User             func(childComplexity int) int
		UserID           func(childComplexity int) int
		VerificationType func(childComplexity int) int
		Verified         func(childComplexity int) int
	}

	Query struct {
		Client         func(childComplexity int, id uuid.UUID) int
		Clients        func(childComplexity int, limit *int, offset *int, filter *ClientFilterInput, orderBy *string, order ClientFieldName, orderDirection OrderDirection) int
		Consent        func(childComplexity int, id uuid.UUID) int
		Consents       func(childComplexity int, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) int
		EmailAddress   func(childComplexity int, id uuid.UUID) int
		EmailAddresses func(childComplexity int, limit *int, offset *int, filter *EmailAddressFilterInput, orderBy *string, order EmailAddressFieldName, orderDirection OrderDirection) int
		Me             func(childComplexity int) int
		PhoneNumber    func(childComplexity int, id uuid.UUID) int
		PhoneNumbers   func(childComplexity int, limit *int, offset *int, filter *PhoneNumberFilterInput, orderBy *string, order PhoneNumberFieldName, orderDirection OrderDirection) int
		User           func(childComplexity int, id uuid.UUID) int
		Users          func(childComplexity int, limit *int, offset *int, filter *UserFilterInput, orderBy *string, order UserFieldName, orderDirection OrderDirection) int
	}

	RevokeConsent struct {
		ID      func(childComplexity int) int
		Revoked func(childComplexity int) int
	}

	User struct {
		Bsn            func(childComplexity int) int
		Consents       func(childComplexity int, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) int
		CreatedAt      func(childComplexity int) int
		DeletedAt      func(childComplexity int) int
		Email          func(childComplexity int) int
		EmailAddresses func(childComplexity int, limit *int, offset *int, filter *EmailAddressFilterInput, orderBy *string, order EmailAddressFieldName, orderDirection OrderDirection) int
		ID             func(childComplexity int) int
		PhoneNumbers   func(childComplexity int, limit *int, offset *int, filter *PhoneNumberFilterInput, orderBy *string, order PhoneNumberFieldName, orderDirection OrderDirection) int
		Pseudonym      func(childComplexity int) int
		Scopes         func(childComplexity int) int
		UpdatedAt      func(childComplexity int) int
	}
}

type ClientResolver interface {
	ID(ctx context.Context, obj *models.Client) (uuid.UUID, error)

	Consents(ctx context.Context, obj *models.Client, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) ([]*models.Consent, error)
}

type ConsentResolver interface {
	ID(ctx context.Context, obj *models.Consent) (uuid.UUID, error)

	Client(ctx context.Context, obj *models.Consent) (*models.Client, error)

	User(ctx context.Context, obj *models.Consent) (*models.User, error)
}

type EmailAddressResolver interface {
	ID(ctx context.Context, obj *models.EmailAddress) (uuid.UUID, error)

	User(ctx context.Context, obj *models.EmailAddress) (*models.User, error)
}

type MutationResolver interface {
	CreateJwt(ctx context.Context, email string, password string) (string, error)
	RefreshJwt(ctx context.Context, token string) (string, error)
	UpdateMe(ctx context.Context, input UpdateUser) (*models.User, error)
	CreateClient(ctx context.Context, input CreateClient) (*models.Client, error)
	UpdateClient(ctx context.Context, id uuid.UUID, input UpdateClient) (*models.Client, error)
	CreateEmailAddress(ctx context.Context, input CreateEmailAddress) (*models.EmailAddress, error)
	UpdateEmailAddress(ctx context.Context, id uuid.UUID, input UpdateEmailAddress) (*models.EmailAddress, error)
	CreatePhoneNumber(ctx context.Context, input CreatePhoneNumber) (*models.PhoneNumber, error)
	UpdatePhoneNumber(ctx context.Context, id uuid.UUID, input UpdatePhoneNumber) (*models.PhoneNumber, error)
	CreateRevokeConsent(ctx context.Context, input CreateRevokeConsent) (*RevokeConsent, error)
	CreateUser(ctx context.Context, input CreateUser) (*models.User, error)
	UpdateUser(ctx context.Context, id uuid.UUID, input UpdateUser) (*models.User, error)
}

type PhoneNumberResolver interface {
	ID(ctx context.Context, obj *models.PhoneNumber) (uuid.UUID, error)

	User(ctx context.Context, obj *models.PhoneNumber) (*models.User, error)
}

type QueryResolver interface {
	Me(ctx context.Context) (*models.User, error)
	Client(ctx context.Context, id uuid.UUID) (*models.Client, error)
	Clients(ctx context.Context, limit *int, offset *int, filter *ClientFilterInput, orderBy *string, order ClientFieldName, orderDirection OrderDirection) ([]*models.Client, error)
	Consent(ctx context.Context, id uuid.UUID) (*models.Consent, error)
	Consents(ctx context.Context, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) ([]*models.Consent, error)
	EmailAddress(ctx context.Context, id uuid.UUID) (*models.EmailAddress, error)
	EmailAddresses(ctx context.Context, limit *int, offset *int, filter *EmailAddressFilterInput, orderBy *string, order EmailAddressFieldName, orderDirection OrderDirection) ([]*models.EmailAddress, error)
	PhoneNumber(ctx context.Context, id uuid.UUID) (*models.PhoneNumber, error)
	PhoneNumbers(ctx context.Context, limit *int, offset *int, filter *PhoneNumberFilterInput, orderBy *string, order PhoneNumberFieldName, orderDirection OrderDirection) ([]*models.PhoneNumber, error)
	User(ctx context.Context, id uuid.UUID) (*models.User, error)
	Users(ctx context.Context, limit *int, offset *int, filter *UserFilterInput, orderBy *string, order UserFieldName, orderDirection OrderDirection) ([]*models.User, error)
}

type UserResolver interface {
	ID(ctx context.Context, obj *models.User) (uuid.UUID, error)

	Consents(ctx context.Context, obj *models.User, limit *int, offset *int, filter *ConsentFilterInput, orderBy *string, order ConsentFieldName, orderDirection OrderDirection) ([]*models.Consent, error)

	EmailAddresses(ctx context.Context, obj *models.User, limit *int, offset *int, filter *EmailAddressFilterInput, orderBy *string, order EmailAddressFieldName, orderDirection OrderDirection) ([]*models.EmailAddress, error)
	PhoneNumbers(ctx context.Context, obj *models.User, limit *int, offset *int, filter *PhoneNumberFilterInput, orderBy *string, order PhoneNumberFieldName, orderDirection OrderDirection) ([]*models.PhoneNumber, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "Client.color":
		if e.complexity.Client.Color == nil {
			break
		}

		return e.complexity.Client.Color(childComplexity), true

	case "Client.consents":
		if e.complexity.Client.Consents == nil {
			break
		}

		args, err := ec.field_Client_consents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Client.Consents(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection)), true

	case "Client.createdAt":
		if e.complexity.Client.CreatedAt == nil {
			break
		}

		return e.complexity.Client.CreatedAt(childComplexity), true

	case "Client.deletedAt":
		if e.complexity.Client.DeletedAt == nil {
			break
		}

		return e.complexity.Client.DeletedAt(childComplexity), true

	case "Client.extClientId":
		if e.complexity.Client.ExtClientID == nil {
			break
		}

		return e.complexity.Client.ExtClientID(childComplexity), true

	case "Client.id":
		if e.complexity.Client.ID == nil {
			break
		}

		return e.complexity.Client.ID(childComplexity), true

	case "Client.icon":
		if e.complexity.Client.Icon == nil {
			break
		}

		return e.complexity.Client.Icon(childComplexity), true

	case "Client.logo":
		if e.complexity.Client.Logo == nil {
			break
		}

		return e.complexity.Client.Logo(childComplexity), true

	case "Client.name":
		if e.complexity.Client.Name == nil {
			break
		}

		return e.complexity.Client.Name(childComplexity), true

	case "Client.updatedAt":
		if e.complexity.Client.UpdatedAt == nil {
			break
		}

		return e.complexity.Client.UpdatedAt(childComplexity), true

	case "Consent.accessToken":
		if e.complexity.Consent.AccessToken == nil {
			break
		}

		return e.complexity.Consent.AccessToken(childComplexity), true

	case "Consent.client":
		if e.complexity.Consent.Client == nil {
			break
		}

		return e.complexity.Consent.Client(childComplexity), true

	case "Consent.clientId":
		if e.complexity.Consent.ClientID == nil {
			break
		}

		return e.complexity.Consent.ClientID(childComplexity), true

	case "Consent.createdAt":
		if e.complexity.Consent.CreatedAt == nil {
			break
		}

		return e.complexity.Consent.CreatedAt(childComplexity), true

	case "Consent.deletedAt":
		if e.complexity.Consent.DeletedAt == nil {
			break
		}

		return e.complexity.Consent.DeletedAt(childComplexity), true

	case "Consent.description":
		if e.complexity.Consent.Description == nil {
			break
		}

		return e.complexity.Consent.Description(childComplexity), true

	case "Consent.granted":
		if e.complexity.Consent.Granted == nil {
			break
		}

		return e.complexity.Consent.Granted(childComplexity), true

	case "Consent.id":
		if e.complexity.Consent.ID == nil {
			break
		}

		return e.complexity.Consent.ID(childComplexity), true

	case "Consent.name":
		if e.complexity.Consent.Name == nil {
			break
		}

		return e.complexity.Consent.Name(childComplexity), true

	case "Consent.revoked":
		if e.complexity.Consent.Revoked == nil {
			break
		}

		return e.complexity.Consent.Revoked(childComplexity), true

	case "Consent.token":
		if e.complexity.Consent.Token == nil {
			break
		}

		return e.complexity.Consent.Token(childComplexity), true

	case "Consent.updatedAt":
		if e.complexity.Consent.UpdatedAt == nil {
			break
		}

		return e.complexity.Consent.UpdatedAt(childComplexity), true

	case "Consent.user":
		if e.complexity.Consent.User == nil {
			break
		}

		return e.complexity.Consent.User(childComplexity), true

	case "Consent.userId":
		if e.complexity.Consent.UserID == nil {
			break
		}

		return e.complexity.Consent.UserID(childComplexity), true

	case "EmailAddress.createdAt":
		if e.complexity.EmailAddress.CreatedAt == nil {
			break
		}

		return e.complexity.EmailAddress.CreatedAt(childComplexity), true

	case "EmailAddress.deletedAt":
		if e.complexity.EmailAddress.DeletedAt == nil {
			break
		}

		return e.complexity.EmailAddress.DeletedAt(childComplexity), true

	case "EmailAddress.emailAddress":
		if e.complexity.EmailAddress.EmailAddress == nil {
			break
		}

		return e.complexity.EmailAddress.EmailAddress(childComplexity), true

	case "EmailAddress.id":
		if e.complexity.EmailAddress.ID == nil {
			break
		}

		return e.complexity.EmailAddress.ID(childComplexity), true

	case "EmailAddress.updatedAt":
		if e.complexity.EmailAddress.UpdatedAt == nil {
			break
		}

		return e.complexity.EmailAddress.UpdatedAt(childComplexity), true

	case "EmailAddress.user":
		if e.complexity.EmailAddress.User == nil {
			break
		}

		return e.complexity.EmailAddress.User(childComplexity), true

	case "EmailAddress.userId":
		if e.complexity.EmailAddress.UserID == nil {
			break
		}

		return e.complexity.EmailAddress.UserID(childComplexity), true

	case "EmailAddress.verified":
		if e.complexity.EmailAddress.Verified == nil {
			break
		}

		return e.complexity.EmailAddress.Verified(childComplexity), true

	case "Mutation.createClient":
		if e.complexity.Mutation.CreateClient == nil {
			break
		}

		args, err := ec.field_Mutation_createClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateClient(childComplexity, args["input"].(CreateClient)), true

	case "Mutation.createEmailAddress":
		if e.complexity.Mutation.CreateEmailAddress == nil {
			break
		}

		args, err := ec.field_Mutation_createEmailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateEmailAddress(childComplexity, args["input"].(CreateEmailAddress)), true

	case "Mutation.createJwt":
		if e.complexity.Mutation.CreateJwt == nil {
			break
		}

		args, err := ec.field_Mutation_createJwt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateJwt(childComplexity, args["email"].(string), args["password"].(string)), true

	case "Mutation.createPhoneNumber":
		if e.complexity.Mutation.CreatePhoneNumber == nil {
			break
		}

		args, err := ec.field_Mutation_createPhoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePhoneNumber(childComplexity, args["input"].(CreatePhoneNumber)), true

	case "Mutation.createRevokeConsent":
		if e.complexity.Mutation.CreateRevokeConsent == nil {
			break
		}

		args, err := ec.field_Mutation_createRevokeConsent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateRevokeConsent(childComplexity, args["input"].(CreateRevokeConsent)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["input"].(CreateUser)), true

	case "Mutation.refreshJwt":
		if e.complexity.Mutation.RefreshJwt == nil {
			break
		}

		args, err := ec.field_Mutation_refreshJwt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RefreshJwt(childComplexity, args["token"].(string)), true

	case "Mutation.updateClient":
		if e.complexity.Mutation.UpdateClient == nil {
			break
		}

		args, err := ec.field_Mutation_updateClient_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateClient(childComplexity, args["id"].(uuid.UUID), args["input"].(UpdateClient)), true

	case "Mutation.updateEmailAddress":
		if e.complexity.Mutation.UpdateEmailAddress == nil {
			break
		}

		args, err := ec.field_Mutation_updateEmailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateEmailAddress(childComplexity, args["id"].(uuid.UUID), args["input"].(UpdateEmailAddress)), true

	case "Mutation.updateMe":
		if e.complexity.Mutation.UpdateMe == nil {
			break
		}

		args, err := ec.field_Mutation_updateMe_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMe(childComplexity, args["input"].(UpdateUser)), true

	case "Mutation.updatePhoneNumber":
		if e.complexity.Mutation.UpdatePhoneNumber == nil {
			break
		}

		args, err := ec.field_Mutation_updatePhoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePhoneNumber(childComplexity, args["id"].(uuid.UUID), args["input"].(UpdatePhoneNumber)), true

	case "Mutation.updateUser":
		if e.complexity.Mutation.UpdateUser == nil {
			break
		}

		args, err := ec.field_Mutation_updateUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateUser(childComplexity, args["id"].(uuid.UUID), args["input"].(UpdateUser)), true

	case "PhoneNumber.createdAt":
		if e.complexity.PhoneNumber.CreatedAt == nil {
			break
		}

		return e.complexity.PhoneNumber.CreatedAt(childComplexity), true

	case "PhoneNumber.deletedAt":
		if e.complexity.PhoneNumber.DeletedAt == nil {
			break
		}

		return e.complexity.PhoneNumber.DeletedAt(childComplexity), true

	case "PhoneNumber.id":
		if e.complexity.PhoneNumber.ID == nil {
			break
		}

		return e.complexity.PhoneNumber.ID(childComplexity), true

	case "PhoneNumber.phoneNumber":
		if e.complexity.PhoneNumber.PhoneNumber == nil {
			break
		}

		return e.complexity.PhoneNumber.PhoneNumber(childComplexity), true

	case "PhoneNumber.updatedAt":
		if e.complexity.PhoneNumber.UpdatedAt == nil {
			break
		}

		return e.complexity.PhoneNumber.UpdatedAt(childComplexity), true

	case "PhoneNumber.user":
		if e.complexity.PhoneNumber.User == nil {
			break
		}

		return e.complexity.PhoneNumber.User(childComplexity), true

	case "PhoneNumber.userId":
		if e.complexity.PhoneNumber.UserID == nil {
			break
		}

		return e.complexity.PhoneNumber.UserID(childComplexity), true

	case "PhoneNumber.verificationType":
		if e.complexity.PhoneNumber.VerificationType == nil {
			break
		}

		return e.complexity.PhoneNumber.VerificationType(childComplexity), true

	case "PhoneNumber.verified":
		if e.complexity.PhoneNumber.Verified == nil {
			break
		}

		return e.complexity.PhoneNumber.Verified(childComplexity), true

	case "Query.client":
		if e.complexity.Query.Client == nil {
			break
		}

		args, err := ec.field_Query_client_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Client(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.clients":
		if e.complexity.Query.Clients == nil {
			break
		}

		args, err := ec.field_Query_clients_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Clients(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ClientFilterInput), args["orderBy"].(*string), args["order"].(ClientFieldName), args["orderDirection"].(OrderDirection)), true

	case "Query.consent":
		if e.complexity.Query.Consent == nil {
			break
		}

		args, err := ec.field_Query_consent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Consent(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.consents":
		if e.complexity.Query.Consents == nil {
			break
		}

		args, err := ec.field_Query_consents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Consents(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection)), true

	case "Query.emailAddress":
		if e.complexity.Query.EmailAddress == nil {
			break
		}

		args, err := ec.field_Query_emailAddress_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailAddress(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.emailAddresses":
		if e.complexity.Query.EmailAddresses == nil {
			break
		}

		args, err := ec.field_Query_emailAddresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailAddresses(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*EmailAddressFilterInput), args["orderBy"].(*string), args["order"].(EmailAddressFieldName), args["orderDirection"].(OrderDirection)), true

	case "Query.me":
		if e.complexity.Query.Me == nil {
			break
		}

		return e.complexity.Query.Me(childComplexity), true

	case "Query.phoneNumber":
		if e.complexity.Query.PhoneNumber == nil {
			break
		}

		args, err := ec.field_Query_phoneNumber_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PhoneNumber(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.phoneNumbers":
		if e.complexity.Query.PhoneNumbers == nil {
			break
		}

		args, err := ec.field_Query_phoneNumbers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PhoneNumbers(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*PhoneNumberFilterInput), args["orderBy"].(*string), args["order"].(PhoneNumberFieldName), args["orderDirection"].(OrderDirection)), true

	case "Query.user":
		if e.complexity.Query.User == nil {
			break
		}

		args, err := ec.field_Query_user_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.User(childComplexity, args["id"].(uuid.UUID)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*UserFilterInput), args["orderBy"].(*string), args["order"].(UserFieldName), args["orderDirection"].(OrderDirection)), true

	case "RevokeConsent.id":
		if e.complexity.RevokeConsent.ID == nil {
			break
		}

		return e.complexity.RevokeConsent.ID(childComplexity), true

	case "RevokeConsent.revoked":
		if e.complexity.RevokeConsent.Revoked == nil {
			break
		}

		return e.complexity.RevokeConsent.Revoked(childComplexity), true

	case "User.bsn":
		if e.complexity.User.Bsn == nil {
			break
		}

		return e.complexity.User.Bsn(childComplexity), true

	case "User.consents":
		if e.complexity.User.Consents == nil {
			break
		}

		args, err := ec.field_User_consents_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.Consents(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection)), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.deletedAt":
		if e.complexity.User.DeletedAt == nil {
			break
		}

		return e.complexity.User.DeletedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.emailAddresses":
		if e.complexity.User.EmailAddresses == nil {
			break
		}

		args, err := ec.field_User_emailAddresses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.EmailAddresses(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*EmailAddressFilterInput), args["orderBy"].(*string), args["order"].(EmailAddressFieldName), args["orderDirection"].(OrderDirection)), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.phoneNumbers":
		if e.complexity.User.PhoneNumbers == nil {
			break
		}

		args, err := ec.field_User_phoneNumbers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.User.PhoneNumbers(childComplexity, args["limit"].(*int), args["offset"].(*int), args["filter"].(*PhoneNumberFilterInput), args["orderBy"].(*string), args["order"].(PhoneNumberFieldName), args["orderDirection"].(OrderDirection)), true

	case "User.pseudonym":
		if e.complexity.User.Pseudonym == nil {
			break
		}

		return e.complexity.User.Pseudonym(childComplexity), true

	case "User.scopes":
		if e.complexity.User.Scopes == nil {
			break
		}

		return e.complexity.User.Scopes(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "schema.graphql", Input: `# Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

scalar JSON
scalar Time
scalar UUID

enum OrderDirection {
  ASC
  DESC
}

schema {
  query: Query
  mutation: Mutation
}

type Query {
  me: User!

  client(id: UUID!): Client!
  clients(limit: Int = 100, offset: Int = -1, filter: ClientFilterInput, orderBy: String @deprecated(reason: "use order instead"), order: ClientFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [Client!]!

  consent(id: UUID!): Consent!
  consents(limit: Int = 100, offset: Int = -1, filter: ConsentFilterInput, orderBy: String @deprecated(reason: "use order instead"), order: ConsentFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [Consent!]!

  emailAddress(id: UUID!): EmailAddress!
  emailAddresses(limit: Int = 100, offset: Int = -1, filter: EmailAddressFilterInput, orderBy: String @deprecated(reason: "use order instead"), order: EmailAddressFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [EmailAddress!]!

  phoneNumber(id: UUID!): PhoneNumber!
  phoneNumbers(limit: Int = 100, offset: Int = -1, filter: PhoneNumberFilterInput, orderBy: String @deprecated(reason: "use order instead"), order: PhoneNumberFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [PhoneNumber!]!

  user(id: UUID!): User!
  users(limit: Int = 100, offset: Int = -1, filter: UserFilterInput, orderBy: String @deprecated(reason: "use order instead"), order: UserFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [User!]!
}

type Mutation {
  createJwt(email: String!, password: String!): String!
  refreshJwt(token: String!): String!
  updateMe(input: UpdateUser!): User!

  # Client Mutations
  createClient(input: CreateClient!): Client!
  updateClient(id: UUID!, input: UpdateClient!): Client!

  # EmailAddress Mutations
  createEmailAddress(input: CreateEmailAddress!): EmailAddress!
  updateEmailAddress(id: UUID!, input: UpdateEmailAddress!): EmailAddress!

  # PhoneNumber Mutations
  createPhoneNumber(input: CreatePhoneNumber!): PhoneNumber!
  updatePhoneNumber(id: UUID!, input: UpdatePhoneNumber!): PhoneNumber!

  # RevokeConsent Mutations
  createRevokeConsent(input: CreateRevokeConsent!): RevokeConsent!

  # User Mutations
  createUser(input: CreateUser!): User!
  updateUser(id: UUID!, input: UpdateUser!): User!
}

enum PhoneNumberVerificationType {
  SMS
  TTS
}

directive @hasClientAccess on FIELD_DEFINITION

type Client {
  id: UUID! @hasClientAccess                          # primary key
  color: String! @hasClientAccess
  consents(limit: Int = 100, offset: Int = -1, filter: ConsentFilterInput, orderBy: String = "createdAt", order: ConsentFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [Consent!]! @hasClientAccess
  extClientId: String! @hasClientAccess
  icon: String! @hasClientAccess
  logo: String! @hasClientAccess
  name: String! @hasClientAccess
  createdAt: Time! @hasClientAccess
  deletedAt: Time @hasClientAccess
  updatedAt: Time! @hasClientAccess
}

input CreateClient {
  color: String!
  extClientId: String!
  icon: String!
  logo: String!
  name: String!
}

input UpdateClient {
  color: String
  extClientId: String
  icon: String
  logo: String
  name: String
}

enum ClientFieldName {
  ID
  COLOR
  EXT_CLIENT_ID
  ICON
  LOGO
  NAME
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

directive @hasConsentAccess on FIELD_DEFINITION

type Consent {
  id: UUID! @hasConsentAccess                         # primary key
  accessToken: String! @hasConsentAccess
  client: Client! @hasConsentAccess
  clientId: UUID! @hasConsentAccess
  description: String! @hasConsentAccess
  granted: Time @hasConsentAccess
  name: String! @hasConsentAccess
  revoked: Time @hasConsentAccess
  token: JSON! @hasConsentAccess
  user: User! @hasConsentAccess
  userId: UUID! @hasConsentAccess
  createdAt: Time! @hasConsentAccess
  deletedAt: Time @hasConsentAccess
  updatedAt: Time! @hasConsentAccess
}

enum ConsentFieldName {
  ID
  ACCESS_TOKEN
  CLIENT_ID
  DESCRIPTION
  GRANTED
  NAME
  REVOKED
  TOKEN
  USER_ID
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

directive @hasEmailAddressAccess on FIELD_DEFINITION

type EmailAddress {
  id: UUID! @hasEmailAddressAccess                    # primary key
  emailAddress: String! @hasEmailAddressAccess
  user: User! @hasEmailAddressAccess
  userId: UUID! @hasEmailAddressAccess
  verified: Boolean! @hasEmailAddressAccess
  createdAt: Time! @hasEmailAddressAccess
  deletedAt: Time @hasEmailAddressAccess
  updatedAt: Time! @hasEmailAddressAccess
}

input CreateEmailAddress {
  emailAddress: String!
  userId: UUID
}

input UpdateEmailAddress {
  emailAddress: String
  userId: UUID
}

enum EmailAddressFieldName {
  ID
  EMAIL_ADDRESS
  USER_ID
  VERIFICATION_TOKEN
  VERIFIED
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

directive @hasPhoneNumberAccess on FIELD_DEFINITION

type PhoneNumber {
  id: UUID! @hasPhoneNumberAccess                     # primary key
  phoneNumber: String! @hasPhoneNumberAccess
  user: User! @hasPhoneNumberAccess
  userId: UUID! @hasPhoneNumberAccess
  verificationType: PhoneNumberVerificationType! @hasPhoneNumberAccess
  verified: Boolean! @hasPhoneNumberAccess
  createdAt: Time! @hasPhoneNumberAccess
  deletedAt: Time @hasPhoneNumberAccess
  updatedAt: Time! @hasPhoneNumberAccess
}

input CreatePhoneNumber {
  phoneNumber: String!
  userId: UUID
  verificationType: PhoneNumberVerificationType!
}

input UpdatePhoneNumber {
  phoneNumber: String
  userId: UUID
  verificationType: PhoneNumberVerificationType
}

enum PhoneNumberFieldName {
  ID
  PHONE_NUMBER
  USER_ID
  VERIFICATION_TOKEN
  VERIFICATION_TYPE
  VERIFIED
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

type RevokeConsent {
  id: UUID!
  revoked: Time!
}

input CreateRevokeConsent {
  id: UUID
}

enum RevokeConsentFieldName {
  ID
  REVOKED
}

directive @hasUserAccess on FIELD_DEFINITION

type User {
  id: UUID! @hasUserAccess                            # primary key
  bsn: String! @hasUserAccess                         # unique index: "bsn"
  consents(limit: Int = 100, offset: Int = -1, filter: ConsentFilterInput, orderBy: String = "createdAt", order: ConsentFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [Consent!]! @hasUserAccess
  email: String! @hasUserAccess
  emailAddresses(limit: Int = 100, offset: Int = -1, filter: EmailAddressFilterInput, orderBy: String = "createdAt", order: EmailAddressFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [EmailAddress!]! @hasUserAccess
  phoneNumbers(limit: Int = 100, offset: Int = -1, filter: PhoneNumberFilterInput, orderBy: String = "createdAt", order: PhoneNumberFieldName! = CREATED_AT, orderDirection: OrderDirection! = ASC): [PhoneNumber!]! @hasUserAccess
  pseudonym: String! @hasUserAccess                   # unique index: "pseudonym"
  scopes: JSON! @hasUserAccess
  createdAt: Time! @hasUserAccess
  deletedAt: Time @hasUserAccess
  updatedAt: Time! @hasUserAccess
}

input CreateUser {
  bsn: String!                                        # unique index: "bsn"
  email: String!
  password: String!
  pseudonym: String!                                  # unique index: "pseudonym"
  scopes: JSON
}

input UpdateUser {
  bsn: String                                         # unique index: "bsn"
  email: String
  password: String
  pseudonym: String                                   # unique index: "pseudonym"
  scopes: JSON
}

enum UserFieldName {
  ID
  BSN
  EMAIL
  PASSWORD
  PSEUDONYM
  SCOPES
  CREATED_AT
  DELETED_AT
  UPDATED_AT
}

input ClientFilterInput {
  id: UUIDFilterInput
  color: StringFilterInput
  extClientId: StringFilterInput
  icon: StringFilterInput
  logo: StringFilterInput
  name: StringFilterInput
  createdAt: TimeFilterInput
  deletedAt: TimeFilterInput
  updatedAt: TimeFilterInput
  unscoped: Boolean

  not: ClientFilterInput
  or: [ClientFilterInput!]
  and: [ClientFilterInput!]
}

input ConsentFilterInput {
  id: UUIDFilterInput
  accessToken: StringFilterInput
  clientId: UUIDFilterInput
  description: StringFilterInput
  granted: TimeFilterInput
  name: StringFilterInput
  revoked: TimeFilterInput
  token: JSONFilterInput
  userId: UUIDFilterInput
  createdAt: TimeFilterInput
  deletedAt: TimeFilterInput
  updatedAt: TimeFilterInput
  unscoped: Boolean

  not: ConsentFilterInput
  or: [ConsentFilterInput!]
  and: [ConsentFilterInput!]
}

input EmailAddressFilterInput {
  id: UUIDFilterInput
  emailAddress: StringFilterInput
  userId: UUIDFilterInput
  verified: BooleanFilterInput
  createdAt: TimeFilterInput
  deletedAt: TimeFilterInput
  updatedAt: TimeFilterInput
  unscoped: Boolean

  not: EmailAddressFilterInput
  or: [EmailAddressFilterInput!]
  and: [EmailAddressFilterInput!]
}

input PhoneNumberFilterInput {
  id: UUIDFilterInput
  phoneNumber: StringFilterInput
  userId: UUIDFilterInput
  verificationType: PhoneNumberVerificationTypeFilterInput
  verified: BooleanFilterInput
  createdAt: TimeFilterInput
  deletedAt: TimeFilterInput
  updatedAt: TimeFilterInput
  unscoped: Boolean

  not: PhoneNumberFilterInput
  or: [PhoneNumberFilterInput!]
  and: [PhoneNumberFilterInput!]
}

input UserFilterInput {
  id: UUIDFilterInput
  bsn: StringFilterInput
  email: StringFilterInput
  pseudonym: StringFilterInput
  scopes: JSONFilterInput
  createdAt: TimeFilterInput
  deletedAt: TimeFilterInput
  updatedAt: TimeFilterInput
  unscoped: Boolean

  not: UserFilterInput
  or: [UserFilterInput!]
  and: [UserFilterInput!]
}

input BooleanFilterInput {
  eq: Boolean
  ne: Boolean

  isSet: Boolean
  not: BooleanFilterInput
}

input JSONFilterInput {
  contains: JSON
  eq: JSON
  hasPath: [String!]
  ne: JSON

  isSet: Boolean
  not: JSONFilterInput
}

input PhoneNumberVerificationTypeFilterInput {
  eq: PhoneNumberVerificationType
  in: [PhoneNumberVerificationType!]
  ne: PhoneNumberVerificationType

  isSet: Boolean
  not: PhoneNumberVerificationTypeFilterInput
}

input StringFilterInput {
  beginsWith: String
  contains: String
  endsWith: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: String

  isSet: Boolean
  not: StringFilterInput
}

input TimeFilterInput {
  eq: Time
  ge: Time
  gt: Time
  le: Time
  lt: Time
  ne: Time

  isSet: Boolean
  not: TimeFilterInput
}

input UUIDFilterInput {
  eq: UUID
  ne: UUID

  isSet: Boolean
  not: UUIDFilterInput
}

`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Client_consents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *ConsentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 ConsentFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNConsentFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_createClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateClient
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateClient2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateClient(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createEmailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateEmailAddress
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateEmailAddress2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateEmailAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createJwt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["password"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["password"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createPhoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreatePhoneNumber
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreatePhoneNumber2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreatePhoneNumber(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createRevokeConsent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateRevokeConsent
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateRevokeConsent2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateRevokeConsent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 CreateUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNCreateUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_refreshJwt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["token"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["token"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updateClient_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 UpdateClient
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateClient2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateClient(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateEmailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 UpdateEmailAddress
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateEmailAddress2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateEmailAddress(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateMe_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 UpdateUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUpdateUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_updatePhoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 UpdatePhoneNumber
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdatePhoneNumber2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdatePhoneNumber(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 UpdateUser
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg1, err = ec.unmarshalNUpdateUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateUser(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_client_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_clients_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *ClientFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOClientFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 ClientFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNClientFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_consent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_consents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *ConsentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 ConsentFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNConsentFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_emailAddress_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_emailAddresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *EmailAddressFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 EmailAddressFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNEmailAddressFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_phoneNumber_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_phoneNumbers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *PhoneNumberFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 PhoneNumberFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNPhoneNumberFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_Query_user_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 uuid.UUID
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *UserFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOUserFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 UserFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNUserFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_User_consents_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *ConsentFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 ConsentFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNConsentFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_User_emailAddresses_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *EmailAddressFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 EmailAddressFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNEmailAddressFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field_User_phoneNumbers_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg0, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg0
	var arg1 *int
	if tmp, ok := rawArgs["offset"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("offset"))
		arg1, err = ec.unmarshalOInt2ᚖint(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["offset"] = arg1
	var arg2 *PhoneNumberFilterInput
	if tmp, ok := rawArgs["filter"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filter"))
		arg2, err = ec.unmarshalOPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filter"] = arg2
	var arg3 *string
	if tmp, ok := rawArgs["orderBy"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderBy"))
		arg3, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderBy"] = arg3
	var arg4 PhoneNumberFieldName
	if tmp, ok := rawArgs["order"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("order"))
		arg4, err = ec.unmarshalNPhoneNumberFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFieldName(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["order"] = arg4
	var arg5 OrderDirection
	if tmp, ok := rawArgs["orderDirection"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("orderDirection"))
		arg5, err = ec.unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["orderDirection"] = arg5
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Client_id(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Client().ID(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_color(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Color, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_consents(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Client_consents_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Client().Consents(rctx, obj, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Consent); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*lab.weave.nl/nid/nid-core/svc/wallet-gql/models.Consent`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Consent)
	fc.Result = res
	return ec.marshalNConsent2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_extClientId(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ExtClientID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_icon(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Icon, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_logo(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Logo, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_name(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Name, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DeletedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Client_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Client) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Client",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UpdatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasClientAccess == nil {
				return nil, errors.New("directive hasClientAccess is not implemented")
			}
			return ec.directives.HasClientAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_id(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Consent().ID(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_accessToken(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.AccessToken, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_client(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Consent().Client(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.Client); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *lab.weave.nl/nid/nid-core/svc/wallet-gql/models.Client`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Client)
	fc.Result = res
	return ec.marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_clientId(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.ClientID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_description(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Description, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_granted(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Granted, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_name(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Name, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_revoked(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Revoked, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_token(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Token, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(postgres.Jsonb); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/jinzhu/gorm/dialects/postgres.Jsonb`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(postgres.Jsonb)
	fc.Result = res
	return ec.marshalNJSON2githubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_user(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.Consent().User(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *lab.weave.nl/nid/nid-core/svc/wallet-gql/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_userId(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UserID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DeletedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Consent_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.Consent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Consent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UpdatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasConsentAccess == nil {
				return nil, errors.New("directive hasConsentAccess is not implemented")
			}
			return ec.directives.HasConsentAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_id(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.EmailAddress().ID(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_emailAddress(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.EmailAddress, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_user(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.EmailAddress().User(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *lab.weave.nl/nid/nid-core/svc/wallet-gql/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_userId(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UserID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_verified(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Verified, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DeletedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _EmailAddress_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.EmailAddress) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EmailAddress",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UpdatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasEmailAddressAccess == nil {
				return nil, errors.New("directive hasEmailAddressAccess is not implemented")
			}
			return ec.directives.HasEmailAddressAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createJwt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createJwt_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateJwt(rctx, args["email"].(string), args["password"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_refreshJwt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_refreshJwt_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RefreshJwt(rctx, args["token"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateMe(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateMe_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateMe(rctx, args["input"].(UpdateUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateClient(rctx, args["input"].(CreateClient))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Client)
	fc.Result = res
	return ec.marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateClient(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateClient_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateClient(rctx, args["id"].(uuid.UUID), args["input"].(UpdateClient))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Client)
	fc.Result = res
	return ec.marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createEmailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createEmailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateEmailAddress(rctx, args["input"].(CreateEmailAddress))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateEmailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateEmailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateEmailAddress(rctx, args["id"].(uuid.UUID), args["input"].(UpdateEmailAddress))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createPhoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createPhoneNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreatePhoneNumber(rctx, args["input"].(CreatePhoneNumber))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updatePhoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updatePhoneNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdatePhoneNumber(rctx, args["id"].(uuid.UUID), args["input"].(UpdatePhoneNumber))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createRevokeConsent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createRevokeConsent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateRevokeConsent(rctx, args["input"].(CreateRevokeConsent))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*RevokeConsent)
	fc.Result = res
	return ec.marshalNRevokeConsent2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐRevokeConsent(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_createUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, args["input"].(CreateUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_updateUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_updateUser_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateUser(rctx, args["id"].(uuid.UUID), args["input"].(UpdateUser))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_id(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.PhoneNumber().ID(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_phoneNumber(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.PhoneNumber, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_user(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.PhoneNumber().User(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*models.User); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *lab.weave.nl/nid/nid-core/svc/wallet-gql/models.User`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_userId(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UserID, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_verificationType(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.VerificationType, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(models.PhoneNumberVerificationType); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be lab.weave.nl/nid/nid-core/svc/wallet-gql/models.PhoneNumberVerificationType`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(models.PhoneNumberVerificationType)
	fc.Result = res
	return ec.marshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_verified(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Verified, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(bool); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be bool`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DeletedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _PhoneNumber_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.PhoneNumber) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "PhoneNumber",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UpdatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasPhoneNumberAccess == nil {
				return nil, errors.New("directive hasPhoneNumberAccess is not implemented")
			}
			return ec.directives.HasPhoneNumberAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_me(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Me(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_client(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_client_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Client(rctx, args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Client)
	fc.Result = res
	return ec.marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_clients(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_clients_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Clients(rctx, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ClientFilterInput), args["orderBy"].(*string), args["order"].(ClientFieldName), args["orderDirection"].(OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Client)
	fc.Result = res
	return ec.marshalNClient2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_consent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_consent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Consent(rctx, args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.Consent)
	fc.Result = res
	return ec.marshalNConsent2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsent(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_consents(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_consents_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Consents(rctx, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Consent)
	fc.Result = res
	return ec.marshalNConsent2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_emailAddress(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_emailAddress_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EmailAddress(rctx, args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_emailAddresses(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_emailAddresses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EmailAddresses(rctx, args["limit"].(*int), args["offset"].(*int), args["filter"].(*EmailAddressFilterInput), args["orderBy"].(*string), args["order"].(EmailAddressFieldName), args["orderDirection"].(OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_phoneNumber(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_phoneNumber_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PhoneNumber(rctx, args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_phoneNumbers(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_phoneNumbers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().PhoneNumbers(rctx, args["limit"].(*int), args["offset"].(*int), args["filter"].(*PhoneNumberFilterInput), args["orderBy"].(*string), args["order"].(PhoneNumberFieldName), args["orderDirection"].(OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_user(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_user_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().User(rctx, args["id"].(uuid.UUID))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_users_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, args["limit"].(*int), args["offset"].(*int), args["filter"].(*UserFilterInput), args["orderBy"].(*string), args["order"].(UserFieldName), args["orderDirection"].(OrderDirection))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.User)
	fc.Result = res
	return ec.marshalNUser2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUserᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _RevokeConsent_id(ctx context.Context, field graphql.CollectedField, obj *RevokeConsent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RevokeConsent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _RevokeConsent_revoked(ctx context.Context, field graphql.CollectedField, obj *RevokeConsent) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "RevokeConsent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Revoked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.User().ID(rctx, obj)
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(uuid.UUID); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/gofrs/uuid.UUID`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uuid.UUID)
	fc.Result = res
	return ec.marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, field.Selections, res)
}

func (ec *executionContext) _User_bsn(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Bsn, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_consents(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_consents_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.User().Consents(rctx, obj, args["limit"].(*int), args["offset"].(*int), args["filter"].(*ConsentFilterInput), args["orderBy"].(*string), args["order"].(ConsentFieldName), args["orderDirection"].(OrderDirection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.Consent); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*lab.weave.nl/nid/nid-core/svc/wallet-gql/models.Consent`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.Consent)
	fc.Result = res
	return ec.marshalNConsent2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Email, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_emailAddresses(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_emailAddresses_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.User().EmailAddresses(rctx, obj, args["limit"].(*int), args["offset"].(*int), args["filter"].(*EmailAddressFilterInput), args["orderBy"].(*string), args["order"].(EmailAddressFieldName), args["orderDirection"].(OrderDirection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.EmailAddress); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*lab.weave.nl/nid/nid-core/svc/wallet-gql/models.EmailAddress`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.EmailAddress)
	fc.Result = res
	return ec.marshalNEmailAddress2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddressᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_phoneNumbers(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_User_phoneNumbers_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return ec.resolvers.User().PhoneNumbers(rctx, obj, args["limit"].(*int), args["offset"].(*int), args["filter"].(*PhoneNumberFilterInput), args["orderBy"].(*string), args["order"].(PhoneNumberFieldName), args["orderDirection"].(OrderDirection))
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.([]*models.PhoneNumber); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be []*lab.weave.nl/nid/nid-core/svc/wallet-gql/models.PhoneNumber`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*models.PhoneNumber)
	fc.Result = res
	return ec.marshalNPhoneNumber2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _User_pseudonym(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Pseudonym, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(string); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be string`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _User_scopes(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.Scopes, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(postgres.Jsonb); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be github.com/jinzhu/gorm/dialects/postgres.Jsonb`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(postgres.Jsonb)
	fc.Result = res
	return ec.marshalNJSON2githubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, field.Selections, res)
}

func (ec *executionContext) _User_createdAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.CreatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_deletedAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.DeletedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(*time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be *time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _User_updatedAt(ctx context.Context, field graphql.CollectedField, obj *models.User) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		directive0 := func(rctx context.Context) (interface{}, error) {
			ctx = rctx // use context from middleware stack in children
			return obj.UpdatedAt, nil
		}
		directive1 := func(ctx context.Context) (interface{}, error) {
			if ec.directives.HasUserAccess == nil {
				return nil, errors.New("directive hasUserAccess is not implemented")
			}
			return ec.directives.HasUserAccess(ctx, obj, directive0)
		}

		tmp, err := directive1(rctx)
		if err != nil {
			return nil, graphql.ErrorOnPath(ctx, err)
		}
		if tmp == nil {
			return nil, nil
		}
		if data, ok := tmp.(time.Time); ok {
			return data, nil
		}
		return nil, fmt.Errorf(`unexpected type %T from directive, should be time.Time`, tmp)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBooleanFilterInput(ctx context.Context, obj interface{}) (BooleanFilterInput, error) {
	var it BooleanFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBooleanFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐBooleanFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputClientFilterInput(ctx context.Context, obj interface{}) (ClientFilterInput, error) {
	var it ClientFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "extClientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extClientId"))
			it.ExtClientID, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "icon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			it.Icon, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "unscoped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unscoped"))
			it.Unscoped, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOClientFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOClientFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOClientFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConsentFilterInput(ctx context.Context, obj interface{}) (ConsentFilterInput, error) {
	var it ConsentFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "accessToken":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("accessToken"))
			it.AccessToken, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "clientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("clientId"))
			it.ClientID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "granted":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("granted"))
			it.Granted, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "revoked":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("revoked"))
			it.Revoked, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "token":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("token"))
			it.Token, err = ec.unmarshalOJSONFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐJSONFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "unscoped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unscoped"))
			it.Unscoped, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOConsentFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOConsentFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateClient(ctx context.Context, obj interface{}) (CreateClient, error) {
	var it CreateClient
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "extClientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extClientId"))
			it.ExtClientID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "icon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			it.Icon, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateEmailAddress(ctx context.Context, obj interface{}) (CreateEmailAddress, error) {
	var it CreateEmailAddress
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "emailAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailAddress"))
			it.EmailAddress, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreatePhoneNumber(ctx context.Context, obj interface{}) (CreatePhoneNumber, error) {
	var it CreatePhoneNumber
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "verificationType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationType"))
			it.VerificationType, err = ec.unmarshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateRevokeConsent(ctx context.Context, obj interface{}) (CreateRevokeConsent, error) {
	var it CreateRevokeConsent
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUser(ctx context.Context, obj interface{}) (CreateUser, error) {
	var it CreateUser
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bsn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bsn"))
			it.Bsn, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pseudonym":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pseudonym"))
			it.Pseudonym, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "scopes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
			it.Scopes, err = ec.unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEmailAddressFilterInput(ctx context.Context, obj interface{}) (EmailAddressFilterInput, error) {
	var it EmailAddressFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "emailAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailAddress"))
			it.EmailAddress, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "verified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verified"))
			it.Verified, err = ec.unmarshalOBooleanFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐBooleanFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "unscoped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unscoped"))
			it.Unscoped, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOEmailAddressFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOEmailAddressFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputJSONFilterInput(ctx context.Context, obj interface{}) (JSONFilterInput, error) {
	var it JSONFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contains"))
			it.Contains, err = ec.unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, v)
			if err != nil {
				return it, err
			}
		case "hasPath":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("hasPath"))
			it.HasPath, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOJSONFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐJSONFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberFilterInput(ctx context.Context, obj interface{}) (PhoneNumberFilterInput, error) {
	var it PhoneNumberFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "verificationType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationType"))
			it.VerificationType, err = ec.unmarshalOPhoneNumberVerificationTypeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberVerificationTypeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "verified":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verified"))
			it.Verified, err = ec.unmarshalOBooleanFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐBooleanFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "unscoped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unscoped"))
			it.Unscoped, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOPhoneNumberFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOPhoneNumberFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPhoneNumberVerificationTypeFilterInput(ctx context.Context, obj interface{}) (PhoneNumberVerificationTypeFilterInput, error) {
	var it PhoneNumberVerificationTypeFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOPhoneNumberVerificationType2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "in":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("in"))
			it.In, err = ec.unmarshalOPhoneNumberVerificationType2ᚕlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationTypeᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOPhoneNumberVerificationType2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOPhoneNumberVerificationTypeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberVerificationTypeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputStringFilterInput(ctx context.Context, obj interface{}) (StringFilterInput, error) {
	var it StringFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "beginsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("beginsWith"))
			it.BeginsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "contains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contains"))
			it.Contains, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "endsWith":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("endsWith"))
			it.EndsWith, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTimeFilterInput(ctx context.Context, obj interface{}) (TimeFilterInput, error) {
	var it TimeFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ge":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ge"))
			it.Ge, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "gt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("gt"))
			it.Gt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "le":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("le"))
			it.Le, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "lt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lt"))
			it.Lt, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOTime2ᚖtimeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUUIDFilterInput(ctx context.Context, obj interface{}) (UUIDFilterInput, error) {
	var it UUIDFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "eq":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("eq"))
			it.Eq, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "ne":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ne"))
			it.Ne, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "isSet":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isSet"))
			it.IsSet, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateClient(ctx context.Context, obj interface{}) (UpdateClient, error) {
	var it UpdateClient
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "color":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("color"))
			it.Color, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "extClientId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("extClientId"))
			it.ExtClientID, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "icon":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("icon"))
			it.Icon, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "logo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("logo"))
			it.Logo, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateEmailAddress(ctx context.Context, obj interface{}) (UpdateEmailAddress, error) {
	var it UpdateEmailAddress
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "emailAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("emailAddress"))
			it.EmailAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdatePhoneNumber(ctx context.Context, obj interface{}) (UpdatePhoneNumber, error) {
	var it UpdatePhoneNumber
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "userId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userId"))
			it.UserID, err = ec.unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx, v)
			if err != nil {
				return it, err
			}
		case "verificationType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("verificationType"))
			it.VerificationType, err = ec.unmarshalOPhoneNumberVerificationType2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUpdateUser(ctx context.Context, obj interface{}) (UpdateUser, error) {
	var it UpdateUser
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "bsn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bsn"))
			it.Bsn, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "password":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("password"))
			it.Password, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "pseudonym":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pseudonym"))
			it.Pseudonym, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "scopes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
			it.Scopes, err = ec.unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUserFilterInput(ctx context.Context, obj interface{}) (UserFilterInput, error) {
	var it UserFilterInput
	asMap := obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "bsn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bsn"))
			it.Bsn, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "pseudonym":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pseudonym"))
			it.Pseudonym, err = ec.unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "scopes":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("scopes"))
			it.Scopes, err = ec.unmarshalOJSONFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐJSONFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "createdAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("createdAt"))
			it.CreatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedAt"))
			it.DeletedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "updatedAt":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("updatedAt"))
			it.UpdatedAt, err = ec.unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "unscoped":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("unscoped"))
			it.Unscoped, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOUserFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOUserFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOUserFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var clientImplementors = []string{"Client"}

func (ec *executionContext) _Client(ctx context.Context, sel ast.SelectionSet, obj *models.Client) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, clientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Client")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Client_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "color":
			out.Values[i] = ec._Client_color(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "consents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Client_consents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "extClientId":
			out.Values[i] = ec._Client_extClientId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "icon":
			out.Values[i] = ec._Client_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "logo":
			out.Values[i] = ec._Client_logo(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "name":
			out.Values[i] = ec._Client_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Client_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Client_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Client_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var consentImplementors = []string{"Consent"}

func (ec *executionContext) _Consent(ctx context.Context, sel ast.SelectionSet, obj *models.Consent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, consentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Consent")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Consent_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "accessToken":
			out.Values[i] = ec._Consent_accessToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "client":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Consent_client(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "clientId":
			out.Values[i] = ec._Consent_clientId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "description":
			out.Values[i] = ec._Consent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "granted":
			out.Values[i] = ec._Consent_granted(ctx, field, obj)
		case "name":
			out.Values[i] = ec._Consent_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "revoked":
			out.Values[i] = ec._Consent_revoked(ctx, field, obj)
		case "token":
			out.Values[i] = ec._Consent_token(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Consent_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			out.Values[i] = ec._Consent_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._Consent_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._Consent_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._Consent_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var emailAddressImplementors = []string{"EmailAddress"}

func (ec *executionContext) _EmailAddress(ctx context.Context, sel ast.SelectionSet, obj *models.EmailAddress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, emailAddressImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EmailAddress")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmailAddress_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailAddress":
			out.Values[i] = ec._EmailAddress_emailAddress(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._EmailAddress_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			out.Values[i] = ec._EmailAddress_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "verified":
			out.Values[i] = ec._EmailAddress_verified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._EmailAddress_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._EmailAddress_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._EmailAddress_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "createJwt":
			out.Values[i] = ec._Mutation_createJwt(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "refreshJwt":
			out.Values[i] = ec._Mutation_refreshJwt(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateMe":
			out.Values[i] = ec._Mutation_updateMe(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createClient":
			out.Values[i] = ec._Mutation_createClient(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateClient":
			out.Values[i] = ec._Mutation_updateClient(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createEmailAddress":
			out.Values[i] = ec._Mutation_createEmailAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateEmailAddress":
			out.Values[i] = ec._Mutation_updateEmailAddress(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createPhoneNumber":
			out.Values[i] = ec._Mutation_createPhoneNumber(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatePhoneNumber":
			out.Values[i] = ec._Mutation_updatePhoneNumber(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createRevokeConsent":
			out.Values[i] = ec._Mutation_createRevokeConsent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createUser":
			out.Values[i] = ec._Mutation_createUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updateUser":
			out.Values[i] = ec._Mutation_updateUser(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var phoneNumberImplementors = []string{"PhoneNumber"}

func (ec *executionContext) _PhoneNumber(ctx context.Context, sel ast.SelectionSet, obj *models.PhoneNumber) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, phoneNumberImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PhoneNumber")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "phoneNumber":
			out.Values[i] = ec._PhoneNumber_phoneNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._PhoneNumber_user(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "userId":
			out.Values[i] = ec._PhoneNumber_userId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "verificationType":
			out.Values[i] = ec._PhoneNumber_verificationType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "verified":
			out.Values[i] = ec._PhoneNumber_verified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._PhoneNumber_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._PhoneNumber_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._PhoneNumber_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "me":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_me(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "client":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_client(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "clients":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_clients(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "consent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_consent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "consents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_consents(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailAddress":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emailAddress(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailAddresses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emailAddresses(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "phoneNumber":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_phoneNumber(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "phoneNumbers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_phoneNumbers(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "user":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_user(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "users":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var revokeConsentImplementors = []string{"RevokeConsent"}

func (ec *executionContext) _RevokeConsent(ctx context.Context, sel ast.SelectionSet, obj *RevokeConsent) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, revokeConsentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("RevokeConsent")
		case "id":
			out.Values[i] = ec._RevokeConsent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "revoked":
			out.Values[i] = ec._RevokeConsent_revoked(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *models.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_id(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "bsn":
			out.Values[i] = ec._User_bsn(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "consents":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_consents(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "email":
			out.Values[i] = ec._User_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "emailAddresses":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_emailAddresses(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "phoneNumbers":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._User_phoneNumbers(ctx, field, obj)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "pseudonym":
			out.Values[i] = ec._User_pseudonym(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "scopes":
			out.Values[i] = ec._User_scopes(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "createdAt":
			out.Values[i] = ec._User_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		case "deletedAt":
			out.Values[i] = ec._User_deletedAt(ctx, field, obj)
		case "updatedAt":
			out.Values[i] = ec._User_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				atomic.AddUint32(&invalids, 1)
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNClient2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx context.Context, sel ast.SelectionSet, v models.Client) graphql.Marshaler {
	return ec._Client(ctx, sel, &v)
}

func (ec *executionContext) marshalNClient2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClientᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Client) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNClient2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐClient(ctx context.Context, sel ast.SelectionSet, v *models.Client) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Client(ctx, sel, v)
}

func (ec *executionContext) unmarshalNClientFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFieldName(ctx context.Context, v interface{}) (ClientFieldName, error) {
	var res ClientFieldName
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNClientFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFieldName(ctx context.Context, sel ast.SelectionSet, v ClientFieldName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNClientFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInput(ctx context.Context, v interface{}) (*ClientFilterInput, error) {
	res, err := ec.unmarshalInputClientFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsent2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsent(ctx context.Context, sel ast.SelectionSet, v models.Consent) graphql.Marshaler {
	return ec._Consent(ctx, sel, &v)
}

func (ec *executionContext) marshalNConsent2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsentᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.Consent) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNConsent2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsent(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNConsent2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐConsent(ctx context.Context, sel ast.SelectionSet, v *models.Consent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Consent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNConsentFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFieldName(ctx context.Context, v interface{}) (ConsentFieldName, error) {
	var res ConsentFieldName
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNConsentFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFieldName(ctx context.Context, sel ast.SelectionSet, v ConsentFieldName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx context.Context, v interface{}) (*ConsentFilterInput, error) {
	res, err := ec.unmarshalInputConsentFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateClient2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateClient(ctx context.Context, v interface{}) (CreateClient, error) {
	res, err := ec.unmarshalInputCreateClient(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateEmailAddress2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateEmailAddress(ctx context.Context, v interface{}) (CreateEmailAddress, error) {
	res, err := ec.unmarshalInputCreateEmailAddress(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreatePhoneNumber2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreatePhoneNumber(ctx context.Context, v interface{}) (CreatePhoneNumber, error) {
	res, err := ec.unmarshalInputCreatePhoneNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateRevokeConsent2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateRevokeConsent(ctx context.Context, v interface{}) (CreateRevokeConsent, error) {
	res, err := ec.unmarshalInputCreateRevokeConsent(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐCreateUser(ctx context.Context, v interface{}) (CreateUser, error) {
	res, err := ec.unmarshalInputCreateUser(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailAddress2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v models.EmailAddress) graphql.Marshaler {
	return ec._EmailAddress(ctx, sel, &v)
}

func (ec *executionContext) marshalNEmailAddress2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddressᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.EmailAddress) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEmailAddress2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEmailAddress2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐEmailAddress(ctx context.Context, sel ast.SelectionSet, v *models.EmailAddress) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EmailAddress(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEmailAddressFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFieldName(ctx context.Context, v interface{}) (EmailAddressFieldName, error) {
	var res EmailAddressFieldName
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNEmailAddressFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFieldName(ctx context.Context, sel ast.SelectionSet, v EmailAddressFieldName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx context.Context, v interface{}) (*EmailAddressFilterInput, error) {
	res, err := ec.unmarshalInputEmailAddressFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNJSON2githubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx context.Context, v interface{}) (postgres.Jsonb, error) {
	res, err := scalars.UnmarshalJSON(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNJSON2githubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx context.Context, sel ast.SelectionSet, v postgres.Jsonb) graphql.Marshaler {
	res := scalars.MarshalJSON(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx context.Context, v interface{}) (OrderDirection, error) {
	var res OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐOrderDirection(ctx context.Context, sel ast.SelectionSet, v OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPhoneNumber2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v models.PhoneNumber) graphql.Marshaler {
	return ec._PhoneNumber(ctx, sel, &v)
}

func (ec *executionContext) marshalNPhoneNumber2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.PhoneNumber) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPhoneNumber2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNPhoneNumber2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumber(ctx context.Context, sel ast.SelectionSet, v *models.PhoneNumber) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._PhoneNumber(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPhoneNumberFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFieldName(ctx context.Context, v interface{}) (PhoneNumberFieldName, error) {
	var res PhoneNumberFieldName
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPhoneNumberFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFieldName(ctx context.Context, sel ast.SelectionSet, v PhoneNumberFieldName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx context.Context, v interface{}) (*PhoneNumberFilterInput, error) {
	res, err := ec.unmarshalInputPhoneNumberFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx context.Context, v interface{}) (models.PhoneNumberVerificationType, error) {
	var res models.PhoneNumberVerificationType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx context.Context, sel ast.SelectionSet, v models.PhoneNumberVerificationType) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNRevokeConsent2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐRevokeConsent(ctx context.Context, sel ast.SelectionSet, v RevokeConsent) graphql.Marshaler {
	return ec._RevokeConsent(ctx, sel, &v)
}

func (ec *executionContext) marshalNRevokeConsent2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐRevokeConsent(ctx context.Context, sel ast.SelectionSet, v *RevokeConsent) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._RevokeConsent(ctx, sel, v)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, v interface{}) (uuid.UUID, error) {
	res, err := scalars.UnmarshalUUID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUUID2githubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v uuid.UUID) graphql.Marshaler {
	res := scalars.MarshalUUID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNUpdateClient2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateClient(ctx context.Context, v interface{}) (UpdateClient, error) {
	res, err := ec.unmarshalInputUpdateClient(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateEmailAddress2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateEmailAddress(ctx context.Context, v interface{}) (UpdateEmailAddress, error) {
	res, err := ec.unmarshalInputUpdateEmailAddress(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdatePhoneNumber2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdatePhoneNumber(ctx context.Context, v interface{}) (UpdatePhoneNumber, error) {
	res, err := ec.unmarshalInputUpdatePhoneNumber(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNUpdateUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUpdateUser(ctx context.Context, v interface{}) (UpdateUser, error) {
	res, err := ec.unmarshalInputUpdateUser(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUser2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v models.User) graphql.Marshaler {
	return ec._User(ctx, sel, &v)
}

func (ec *executionContext) marshalNUser2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUserᚄ(ctx context.Context, sel ast.SelectionSet, v []*models.User) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNUser2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐUser(ctx context.Context, sel ast.SelectionSet, v *models.User) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUserFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFieldName(ctx context.Context, v interface{}) (UserFieldName, error) {
	var res UserFieldName
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNUserFieldName2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFieldName(ctx context.Context, sel ast.SelectionSet, v UserFieldName) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNUserFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInput(ctx context.Context, v interface{}) (*UserFilterInput, error) {
	res, err := ec.unmarshalInputUserFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐBooleanFilterInput(ctx context.Context, v interface{}) (*BooleanFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBooleanFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOClientFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInputᚄ(ctx context.Context, v interface{}) ([]*ClientFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ClientFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNClientFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOClientFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐClientFilterInput(ctx context.Context, v interface{}) (*ClientFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputClientFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOConsentFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInputᚄ(ctx context.Context, v interface{}) ([]*ConsentFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*ConsentFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOConsentFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐConsentFilterInput(ctx context.Context, v interface{}) (*ConsentFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputConsentFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOEmailAddressFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInputᚄ(ctx context.Context, v interface{}) ([]*EmailAddressFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*EmailAddressFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEmailAddressFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐEmailAddressFilterInput(ctx context.Context, v interface{}) (*EmailAddressFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputEmailAddressFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) unmarshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx context.Context, v interface{}) (*postgres.Jsonb, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalars.UnmarshalJSON(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOJSON2ᚖgithubᚗcomᚋjinzhuᚋgormᚋdialectsᚋpostgresᚐJsonb(ctx context.Context, sel ast.SelectionSet, v *postgres.Jsonb) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalars.MarshalJSON(*v)
}

func (ec *executionContext) unmarshalOJSONFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐJSONFilterInput(ctx context.Context, v interface{}) (*JSONFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputJSONFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhoneNumberFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInputᚄ(ctx context.Context, v interface{}) ([]*PhoneNumberFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*PhoneNumberFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOPhoneNumberFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberFilterInput(ctx context.Context, v interface{}) (*PhoneNumberFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhoneNumberFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOPhoneNumberVerificationType2ᚕlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationTypeᚄ(ctx context.Context, v interface{}) ([]models.PhoneNumberVerificationType, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]models.PhoneNumberVerificationType, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOPhoneNumberVerificationType2ᚕlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []models.PhoneNumberVerificationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNPhoneNumberVerificationType2labᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOPhoneNumberVerificationType2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx context.Context, v interface{}) (*models.PhoneNumberVerificationType, error) {
	if v == nil {
		return nil, nil
	}
	res := new(models.PhoneNumberVerificationType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOPhoneNumberVerificationType2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋmodelsᚐPhoneNumberVerificationType(ctx context.Context, sel ast.SelectionSet, v *models.PhoneNumberVerificationType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOPhoneNumberVerificationTypeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐPhoneNumberVerificationTypeFilterInput(ctx context.Context, v interface{}) (*PhoneNumberVerificationTypeFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputPhoneNumberVerificationTypeFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOStringFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐStringFilterInput(ctx context.Context, v interface{}) (*StringFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputStringFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalTime(*v)
}

func (ec *executionContext) unmarshalOTimeFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐTimeFilterInput(ctx context.Context, v interface{}) (*TimeFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputTimeFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, v interface{}) (*uuid.UUID, error) {
	if v == nil {
		return nil, nil
	}
	res, err := scalars.UnmarshalUUID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOUUID2ᚖgithubᚗcomᚋgofrsᚋuuidᚐUUID(ctx context.Context, sel ast.SelectionSet, v *uuid.UUID) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return scalars.MarshalUUID(*v)
}

func (ec *executionContext) unmarshalOUUIDFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUUIDFilterInput(ctx context.Context, v interface{}) (*UUIDFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUUIDFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOUserFilterInput2ᚕᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInputᚄ(ctx context.Context, v interface{}) ([]*UserFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*UserFilterInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNUserFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOUserFilterInput2ᚖlabᚗweaveᚗnlᚋnidᚋnidᚑcoreᚋsvcᚋwalletᚑgqlᚋgraphqlᚐUserFilterInput(ctx context.Context, v interface{}) (*UserFilterInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputUserFilterInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
