// Code generated by mockery v2.29.0. DO NOT EDIT.

package mock

import (
	context "context"

	authv3 "github.com/envoyproxy/go-control-plane/envoy/service/auth/v3"

	mock "github.com/stretchr/testify/mock"
)

// AuthorizationRule is an autogenerated mock type for the AuthorizationRule type
type AuthorizationRule struct {
	mock.Mock
}

// Check provides a mock function with given fields: ctx, request
func (_m *AuthorizationRule) Check(ctx context.Context, request *authv3.CheckRequest) error {
	ret := _m.Called(ctx, request)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *authv3.CheckRequest) error); ok {
		r0 = rf(ctx, request)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *AuthorizationRule) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewAuthorizationRule interface {
	mock.TestingT
	Cleanup(func())
}

// NewAuthorizationRule creates a new instance of AuthorizationRule. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAuthorizationRule(t mockConstructorTestingTNewAuthorizationRule) *AuthorizationRule {
	mock := &AuthorizationRule{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
