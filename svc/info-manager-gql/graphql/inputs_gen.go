// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/gofrs/uuid"
	"lab.weave.nl/nid/nid-core/svc/info-manager/models"
)

type CreateScript struct {
	Description string              `json:"description"`
	Name        string              `json:"name"`
	Status      models.ScriptStatus `json:"status"`
}

type ScriptFilterInput struct {
	ID          *UUIDFilterInput         `json:"id"`
	Description *StringFilterInput       `json:"description"`
	Name        *StringFilterInput       `json:"name"`
	Status      *ScriptStatusFilterInput `json:"status"`
	CreatedAt   *TimeFilterInput         `json:"createdAt"`
	DeletedAt   *TimeFilterInput         `json:"deletedAt"`
	UpdatedAt   *TimeFilterInput         `json:"updatedAt"`
	Unscoped    *bool                    `json:"unscoped"`
	Not         *ScriptFilterInput       `json:"not"`
	Or          []*ScriptFilterInput     `json:"or"`
	And         []*ScriptFilterInput     `json:"and"`
}

type ScriptSourceFilterInput struct {
	ID                *UUIDFilterInput           `json:"id"`
	ChangeDescription *StringFilterInput         `json:"changeDescription"`
	Checksum          *StringFilterInput         `json:"checksum"`
	RawScript         *StringFilterInput         `json:"rawScript"`
	ScriptID          *UUIDFilterInput           `json:"scriptId"`
	SignedURL         *StringFilterInput         `json:"signedUrl"`
	Version           *StringFilterInput         `json:"version"`
	CreatedAt         *TimeFilterInput           `json:"createdAt"`
	DeletedAt         *TimeFilterInput           `json:"deletedAt"`
	UpdatedAt         *TimeFilterInput           `json:"updatedAt"`
	Unscoped          *bool                      `json:"unscoped"`
	Not               *ScriptSourceFilterInput   `json:"not"`
	Or                []*ScriptSourceFilterInput `json:"or"`
	And               []*ScriptSourceFilterInput `json:"and"`
}

type ScriptStatusFilterInput struct {
	Eq    *models.ScriptStatus     `json:"eq"`
	In    []models.ScriptStatus    `json:"in"`
	Ne    *models.ScriptStatus     `json:"ne"`
	IsSet *bool                    `json:"isSet"`
	Not   *ScriptStatusFilterInput `json:"not"`
}

type StringFilterInput struct {
	BeginsWith *string            `json:"beginsWith"`
	Contains   *string            `json:"contains"`
	EndsWith   *string            `json:"endsWith"`
	Eq         *string            `json:"eq"`
	Ge         *string            `json:"ge"`
	Gt         *string            `json:"gt"`
	Le         *string            `json:"le"`
	Lt         *string            `json:"lt"`
	Ne         *string            `json:"ne"`
	IsSet      *bool              `json:"isSet"`
	Not        *StringFilterInput `json:"not"`
}

type TimeFilterInput struct {
	Eq    *time.Time       `json:"eq"`
	Ge    *time.Time       `json:"ge"`
	Gt    *time.Time       `json:"gt"`
	Le    *time.Time       `json:"le"`
	Lt    *time.Time       `json:"lt"`
	Ne    *time.Time       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *TimeFilterInput `json:"not"`
}

type UUIDFilterInput struct {
	Eq    *uuid.UUID       `json:"eq"`
	Ne    *uuid.UUID       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *UUIDFilterInput `json:"not"`
}

type UpdateScript struct {
	Description *string              `json:"description"`
	Name        *string              `json:"name"`
	Status      *models.ScriptStatus `json:"status"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScriptFieldName string

const (
	ScriptFieldNameID          ScriptFieldName = "ID"
	ScriptFieldNameDescription ScriptFieldName = "DESCRIPTION"
	ScriptFieldNameName        ScriptFieldName = "NAME"
	ScriptFieldNameStatus      ScriptFieldName = "STATUS"
	ScriptFieldNameCreatedAt   ScriptFieldName = "CREATED_AT"
	ScriptFieldNameDeletedAt   ScriptFieldName = "DELETED_AT"
	ScriptFieldNameUpdatedAt   ScriptFieldName = "UPDATED_AT"
)

var AllScriptFieldName = []ScriptFieldName{
	ScriptFieldNameID,
	ScriptFieldNameDescription,
	ScriptFieldNameName,
	ScriptFieldNameStatus,
	ScriptFieldNameCreatedAt,
	ScriptFieldNameDeletedAt,
	ScriptFieldNameUpdatedAt,
}

func (e ScriptFieldName) IsValid() bool {
	switch e {
	case ScriptFieldNameID, ScriptFieldNameDescription, ScriptFieldNameName, ScriptFieldNameStatus, ScriptFieldNameCreatedAt, ScriptFieldNameDeletedAt, ScriptFieldNameUpdatedAt:
		return true
	}
	return false
}

func (e ScriptFieldName) String() string {
	return string(e)
}

func (e *ScriptFieldName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptFieldName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptFieldName", str)
	}
	return nil
}

func (e ScriptFieldName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScriptSourceFieldName string

const (
	ScriptSourceFieldNameID                ScriptSourceFieldName = "ID"
	ScriptSourceFieldNameChangeDescription ScriptSourceFieldName = "CHANGE_DESCRIPTION"
	ScriptSourceFieldNameChecksum          ScriptSourceFieldName = "CHECKSUM"
	ScriptSourceFieldNameRawScript         ScriptSourceFieldName = "RAW_SCRIPT"
	ScriptSourceFieldNameScriptID          ScriptSourceFieldName = "SCRIPT_ID"
	ScriptSourceFieldNameSignedURL         ScriptSourceFieldName = "SIGNED_URL"
	ScriptSourceFieldNameVersion           ScriptSourceFieldName = "VERSION"
	ScriptSourceFieldNameCreatedAt         ScriptSourceFieldName = "CREATED_AT"
	ScriptSourceFieldNameDeletedAt         ScriptSourceFieldName = "DELETED_AT"
	ScriptSourceFieldNameUpdatedAt         ScriptSourceFieldName = "UPDATED_AT"
)

var AllScriptSourceFieldName = []ScriptSourceFieldName{
	ScriptSourceFieldNameID,
	ScriptSourceFieldNameChangeDescription,
	ScriptSourceFieldNameChecksum,
	ScriptSourceFieldNameRawScript,
	ScriptSourceFieldNameScriptID,
	ScriptSourceFieldNameSignedURL,
	ScriptSourceFieldNameVersion,
	ScriptSourceFieldNameCreatedAt,
	ScriptSourceFieldNameDeletedAt,
	ScriptSourceFieldNameUpdatedAt,
}

func (e ScriptSourceFieldName) IsValid() bool {
	switch e {
	case ScriptSourceFieldNameID, ScriptSourceFieldNameChangeDescription, ScriptSourceFieldNameChecksum, ScriptSourceFieldNameRawScript, ScriptSourceFieldNameScriptID, ScriptSourceFieldNameSignedURL, ScriptSourceFieldNameVersion, ScriptSourceFieldNameCreatedAt, ScriptSourceFieldNameDeletedAt, ScriptSourceFieldNameUpdatedAt:
		return true
	}
	return false
}

func (e ScriptSourceFieldName) String() string {
	return string(e)
}

func (e *ScriptSourceFieldName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptSourceFieldName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptSourceFieldName", str)
	}
	return nil
}

func (e ScriptSourceFieldName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
