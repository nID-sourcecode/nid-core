// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/gofrs/uuid"
)

type CreateScript struct {
	EventType      string    `json:"eventType"`
	OrganisationID uuid.UUID `json:"organisationId"`
	Script         string    `json:"script"`
}

type ScriptFilterInput struct {
	ID             *UUIDFilterInput     `json:"id"`
	EventType      *StringFilterInput   `json:"eventType"`
	OrganisationID *UUIDFilterInput     `json:"organisationId"`
	Script         *StringFilterInput   `json:"script"`
	CreatedAt      *TimeFilterInput     `json:"createdAt"`
	DeletedAt      *TimeFilterInput     `json:"deletedAt"`
	UpdatedAt      *TimeFilterInput     `json:"updatedAt"`
	Unscoped       *bool                `json:"unscoped"`
	Not            *ScriptFilterInput   `json:"not"`
	Or             []*ScriptFilterInput `json:"or"`
	And            []*ScriptFilterInput `json:"and"`
}

type StringFilterInput struct {
	BeginsWith *string            `json:"beginsWith"`
	Contains   *string            `json:"contains"`
	EndsWith   *string            `json:"endsWith"`
	Eq         *string            `json:"eq"`
	Ge         *string            `json:"ge"`
	Gt         *string            `json:"gt"`
	Le         *string            `json:"le"`
	Lt         *string            `json:"lt"`
	Ne         *string            `json:"ne"`
	IsSet      *bool              `json:"isSet"`
	Not        *StringFilterInput `json:"not"`
}

type TimeFilterInput struct {
	Eq    *time.Time       `json:"eq"`
	Ge    *time.Time       `json:"ge"`
	Gt    *time.Time       `json:"gt"`
	Le    *time.Time       `json:"le"`
	Lt    *time.Time       `json:"lt"`
	Ne    *time.Time       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *TimeFilterInput `json:"not"`
}

type UUIDFilterInput struct {
	Eq    *uuid.UUID       `json:"eq"`
	Ne    *uuid.UUID       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *UUIDFilterInput `json:"not"`
}

type UpdateScript struct {
	EventType      *string    `json:"eventType"`
	OrganisationID *uuid.UUID `json:"organisationId"`
	Script         *string    `json:"script"`
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type ScriptFieldName string

const (
	ScriptFieldNameID             ScriptFieldName = "ID"
	ScriptFieldNameEventType      ScriptFieldName = "EVENT_TYPE"
	ScriptFieldNameOrganisationID ScriptFieldName = "ORGANISATION_ID"
	ScriptFieldNameScript         ScriptFieldName = "SCRIPT"
	ScriptFieldNameCreatedAt      ScriptFieldName = "CREATED_AT"
	ScriptFieldNameDeletedAt      ScriptFieldName = "DELETED_AT"
	ScriptFieldNameUpdatedAt      ScriptFieldName = "UPDATED_AT"
)

var AllScriptFieldName = []ScriptFieldName{
	ScriptFieldNameID,
	ScriptFieldNameEventType,
	ScriptFieldNameOrganisationID,
	ScriptFieldNameScript,
	ScriptFieldNameCreatedAt,
	ScriptFieldNameDeletedAt,
	ScriptFieldNameUpdatedAt,
}

func (e ScriptFieldName) IsValid() bool {
	switch e {
	case ScriptFieldNameID, ScriptFieldNameEventType, ScriptFieldNameOrganisationID, ScriptFieldNameScript, ScriptFieldNameCreatedAt, ScriptFieldNameDeletedAt, ScriptFieldNameUpdatedAt:
		return true
	}
	return false
}

func (e ScriptFieldName) String() string {
	return string(e)
}

func (e *ScriptFieldName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ScriptFieldName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ScriptFieldName", str)
	}
	return nil
}

func (e ScriptFieldName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
