// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
)

// Organisation Relational Model
type Organisation struct {
	ID               uuid.UUID  `sql:"default:uuid_generate_v4()" gorm:"primary_key" json:"id"` // primary key
	AudienceID       uuid.UUID  `json:"audience_id"`
	RedirectTargetID uuid.UUID  `json:"redirect_target_id"`
	Scripts          []*Script  `json:"scripts"`
	Uzovi            string     `json:"uzovi"`
	CreatedAt        time.Time  `json:"created_at"`
	DeletedAt        *time.Time `json:"deleted_at"`
	UpdatedAt        time.Time  `json:"updated_at"`
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Organisation) TableName() string {
	return "organisations"
}

// OrganisationDB is the implementation of the storage interface for
// Organisation.
type OrganisationDB struct {
	Db *gorm.DB // Deprecated: Use OrganisationDB.DB() instead.
}

// NewOrganisationDB creates a new storage type.
func NewOrganisationDB(db *gorm.DB) *OrganisationDB {
	return &OrganisationDB{Db: db}
}

// DB returns the underlying database.
func (m *OrganisationDB) DB() interface{} {
	return m.Db
}

// TableName returns the table name of the associated model
//
// Deprecated: Use db.Model(Organisation{}) instead.
func (m *OrganisationDB) TableName() string {
	return "organisations"
}

// CRUD Functions

// Get returns a single Organisation as a Database Model
func (m *OrganisationDB) Get(ctx context.Context, id uuid.UUID) (*Organisation, error) {
	var native Organisation
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Organisation
func (m *OrganisationDB) List(ctx context.Context) ([]*Organisation, error) {
	var objs []*Organisation
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *OrganisationDB) Add(ctx context.Context, model *Organisation) error {
	err := m.Db.Create(model).Error
	if err != nil {
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *OrganisationDB) Update(ctx context.Context, model *Organisation) error {
	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *OrganisationDB) Delete(ctx context.Context, id uuid.UUID) error {
	err := m.Db.Where("id = ?", id).Delete(&Organisation{}).Error
	if err != nil {
		return err
	}

	return nil
}
