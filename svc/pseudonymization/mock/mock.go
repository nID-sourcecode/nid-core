// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	grpc "google.golang.org/grpc"

	pseudonymization "github.com/nID-sourcecode/nid-core/svc/pseudonymization/proto"
)

// PseudonymizerClient is an autogenerated mock type for the PseudonymizerClient type
type PseudonymizerClient struct {
	mock.Mock
}

// Convert provides a mock function with given fields: ctx, in, opts
func (_m *PseudonymizerClient) Convert(ctx context.Context, in *pseudonymization.ConvertRequest, opts ...grpc.CallOption) (*pseudonymization.ConvertResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pseudonymization.ConvertResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pseudonymization.ConvertRequest, ...grpc.CallOption) *pseudonymization.ConvertResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pseudonymization.ConvertResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pseudonymization.ConvertRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Generate provides a mock function with given fields: ctx, in, opts
func (_m *PseudonymizerClient) Generate(ctx context.Context, in *pseudonymization.GenerateRequest, opts ...grpc.CallOption) (*pseudonymization.GenerateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pseudonymization.GenerateResponse
	if rf, ok := ret.Get(0).(func(context.Context, *pseudonymization.GenerateRequest, ...grpc.CallOption) *pseudonymization.GenerateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pseudonymization.GenerateResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *pseudonymization.GenerateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
