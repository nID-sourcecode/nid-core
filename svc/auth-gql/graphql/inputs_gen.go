// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package graphql

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm/dialects/postgres"
	"github.com/nID-sourcecode/nid-core/svc/auth/models"
)

type AccessModelTypeFilterInput struct {
	Eq    *models.AccessModelType     `json:"eq"`
	In    []models.AccessModelType    `json:"in"`
	Ne    *models.AccessModelType     `json:"ne"`
	IsSet *bool                       `json:"isSet"`
	Not   *AccessModelTypeFilterInput `json:"not"`
}

type ClientFilterInput struct {
	ID        *UUIDFilterInput     `json:"id"`
	Color     *StringFilterInput   `json:"color"`
	Icon      *StringFilterInput   `json:"icon"`
	Logo      *StringFilterInput   `json:"logo"`
	Metadata  *JSONFilterInput     `json:"metadata"`
	Name      *StringFilterInput   `json:"name"`
	CreatedAt *TimeFilterInput     `json:"createdAt"`
	DeletedAt *TimeFilterInput     `json:"deletedAt"`
	UpdatedAt *TimeFilterInput     `json:"updatedAt"`
	Unscoped  *bool                `json:"unscoped"`
	Not       *ClientFilterInput   `json:"not"`
	Or        []*ClientFilterInput `json:"or"`
	And       []*ClientFilterInput `json:"and"`
}

type JSONFilterInput struct {
	Contains *postgres.Jsonb  `json:"contains"`
	Eq       *postgres.Jsonb  `json:"eq"`
	HasPath  []string         `json:"hasPath"`
	Ne       *postgres.Jsonb  `json:"ne"`
	IsSet    *bool            `json:"isSet"`
	Not      *JSONFilterInput `json:"not"`
}

type SessionStateFilterInput struct {
	Eq    *models.SessionState     `json:"eq"`
	In    []models.SessionState    `json:"in"`
	Ne    *models.SessionState     `json:"ne"`
	IsSet *bool                    `json:"isSet"`
	Not   *SessionStateFilterInput `json:"not"`
}

type StringFilterInput struct {
	BeginsWith *string            `json:"beginsWith"`
	Contains   *string            `json:"contains"`
	EndsWith   *string            `json:"endsWith"`
	Eq         *string            `json:"eq"`
	Ge         *string            `json:"ge"`
	Gt         *string            `json:"gt"`
	Le         *string            `json:"le"`
	Lt         *string            `json:"lt"`
	Ne         *string            `json:"ne"`
	IsSet      *bool              `json:"isSet"`
	Not        *StringFilterInput `json:"not"`
}

type TimeFilterInput struct {
	Eq    *time.Time       `json:"eq"`
	Ge    *time.Time       `json:"ge"`
	Gt    *time.Time       `json:"gt"`
	Le    *time.Time       `json:"le"`
	Lt    *time.Time       `json:"lt"`
	Ne    *time.Time       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *TimeFilterInput `json:"not"`
}

type UUIDFilterInput struct {
	Eq    *uuid.UUID       `json:"eq"`
	Ne    *uuid.UUID       `json:"ne"`
	IsSet *bool            `json:"isSet"`
	Not   *UUIDFilterInput `json:"not"`
}

type ClientFieldName string

const (
	ClientFieldNameID        ClientFieldName = "ID"
	ClientFieldNameColor     ClientFieldName = "COLOR"
	ClientFieldNameIcon      ClientFieldName = "ICON"
	ClientFieldNameLogo      ClientFieldName = "LOGO"
	ClientFieldNameMetadata  ClientFieldName = "METADATA"
	ClientFieldNameName      ClientFieldName = "NAME"
	ClientFieldNamePassword  ClientFieldName = "PASSWORD"
	ClientFieldNameCreatedAt ClientFieldName = "CREATED_AT"
	ClientFieldNameDeletedAt ClientFieldName = "DELETED_AT"
	ClientFieldNameUpdatedAt ClientFieldName = "UPDATED_AT"
)

var AllClientFieldName = []ClientFieldName{
	ClientFieldNameID,
	ClientFieldNameColor,
	ClientFieldNameIcon,
	ClientFieldNameLogo,
	ClientFieldNameMetadata,
	ClientFieldNameName,
	ClientFieldNamePassword,
	ClientFieldNameCreatedAt,
	ClientFieldNameDeletedAt,
	ClientFieldNameUpdatedAt,
}

func (e ClientFieldName) IsValid() bool {
	switch e {
	case ClientFieldNameID, ClientFieldNameColor, ClientFieldNameIcon, ClientFieldNameLogo, ClientFieldNameMetadata, ClientFieldNameName, ClientFieldNamePassword, ClientFieldNameCreatedAt, ClientFieldNameDeletedAt, ClientFieldNameUpdatedAt:
		return true
	}
	return false
}

func (e ClientFieldName) String() string {
	return string(e)
}

func (e *ClientFieldName) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ClientFieldName(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ClientFieldName", str)
	}
	return nil
}

func (e ClientFieldName) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
