// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: documentation.proto

package proto

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _documentation_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if !strings.HasSuffix(m.GetFilePath(), ".md") {
		return GetFileRequestValidationError{
			field:  "FilePath",
			reason: "value does not have suffix \".md\"",
		}
	}

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		return GetFileRequestValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
	}

	// no validation rules for ServiceName

	return nil
}

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFileResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Content

	for idx, item := range m.GetSwaggerFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetFileResponseValidationError{
					field:  fmt.Sprintf("SwaggerFiles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// GetFileResponseValidationError is the validation error returned by
// GetFileResponse.Validate if the designated constraints aren't met.
type GetFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileResponseValidationError) ErrorName() string { return "GetFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileResponseValidationError{}

// Validate checks the field values on SwaggerFile with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *SwaggerFile) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for SignedUrl

	return nil
}

// SwaggerFileValidationError is the validation error returned by
// SwaggerFile.Validate if the designated constraints aren't met.
type SwaggerFileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SwaggerFileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SwaggerFileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SwaggerFileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SwaggerFileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SwaggerFileValidationError) ErrorName() string { return "SwaggerFileValidationError" }

// Error satisfies the builtin error interface
func (e SwaggerFileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSwaggerFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SwaggerFileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SwaggerFileValidationError{}

// Validate checks the field values on ListDirectoryFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDirectoryFilesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FilePath

	if utf8.RuneCountInString(m.GetRef()) < 1 {
		return ListDirectoryFilesRequestValidationError{
			field:  "Ref",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// ListDirectoryFilesRequestValidationError is the validation error returned by
// ListDirectoryFilesRequest.Validate if the designated constraints aren't met.
type ListDirectoryFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirectoryFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirectoryFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirectoryFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirectoryFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirectoryFilesRequestValidationError) ErrorName() string {
	return "ListDirectoryFilesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirectoryFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirectoryFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirectoryFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirectoryFilesRequestValidationError{}

// Validate checks the field values on ListDirectoryFilesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDirectoryFilesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetFiles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDirectoryFilesResponseValidationError{
					field:  fmt.Sprintf("Files[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDirectoryFilesResponseValidationError is the validation error returned
// by ListDirectoryFilesResponse.Validate if the designated constraints aren't met.
type ListDirectoryFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDirectoryFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDirectoryFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDirectoryFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDirectoryFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDirectoryFilesResponseValidationError) ErrorName() string {
	return "ListDirectoryFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDirectoryFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDirectoryFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDirectoryFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDirectoryFilesResponseValidationError{}

// Validate checks the field values on File with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *File) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Extension

	// no validation rules for PrettyName

	// no validation rules for Path

	// no validation rules for Type

	return nil
}

// FileValidationError is the validation error returned by File.Validate if the
// designated constraints aren't met.
type FileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FileValidationError) ErrorName() string { return "FileValidationError" }

// Error satisfies the builtin error interface
func (e FileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FileValidationError{}

// Validate checks the field values on ListRepositoryRefsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListRepositoryRefsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRefs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRepositoryRefsResponseValidationError{
					field:  fmt.Sprintf("Refs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListRepositoryRefsResponseValidationError is the validation error returned
// by ListRepositoryRefsResponse.Validate if the designated constraints aren't met.
type ListRepositoryRefsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRepositoryRefsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRepositoryRefsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRepositoryRefsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRepositoryRefsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRepositoryRefsResponseValidationError) ErrorName() string {
	return "ListRepositoryRefsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListRepositoryRefsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRepositoryRefsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRepositoryRefsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRepositoryRefsResponseValidationError{}

// Validate checks the field values on Ref with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Ref) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	// no validation rules for Type

	return nil
}

// RefValidationError is the validation error returned by Ref.Validate if the
// designated constraints aren't met.
type RefValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefValidationError) ErrorName() string { return "RefValidationError" }

// Error satisfies the builtin error interface
func (e RefValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRef.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefValidationError{}
