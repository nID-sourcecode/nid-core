// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"context"
	"time"

	"github.com/jinzhu/gorm"
)

// Address Relational Model
type Address struct {
	ID               int              `gorm:"primary_key" json:"id"` // primary key
	ContactDetails   []*ContactDetail `json:"contact_details"`
	HouseNumber      int              `json:"house_number"`
	HouseNumberAddon *string          `json:"house_number_addon"`
	PostalCode       string           `json:"postal_code"`
	CreatedAt        time.Time        `json:"created_at"`
	DeletedAt        *time.Time       `json:"deleted_at"`
	UpdatedAt        time.Time        `json:"updated_at"`
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m Address) TableName() string {
	return "addresses"
}

// AddressDB is the implementation of the storage interface for
// Address.
type AddressDB struct {
	Db *gorm.DB // Deprecated: Use AddressDB.DB() instead.
}

// NewAddressDB creates a new storage type.
func NewAddressDB(db *gorm.DB) *AddressDB {
	return &AddressDB{Db: db}
}

// DB returns the underlying database.
func (m *AddressDB) DB() interface{} {
	return m.Db
}

// TableName returns the table name of the associated model
//
// Deprecated: Use db.Model(Address{}) instead.
func (m *AddressDB) TableName() string {
	return "addresses"
}

// CRUD Functions

// Get returns a single Address as a Database Model
func (m *AddressDB) Get(ctx context.Context, id int) (*Address, error) {
	var native Address
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of Address
func (m *AddressDB) List(ctx context.Context) ([]*Address, error) {
	var objs []*Address
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *AddressDB) Add(ctx context.Context, model *Address) error {
	err := m.Db.Create(model).Error
	if err != nil {
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *AddressDB) Update(ctx context.Context, model *Address) error {
	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *AddressDB) Delete(ctx context.Context, id int) error {
	err := m.Db.Where("id = ?", id).Delete(&Address{}).Error
	if err != nil {
		return err
	}

	return nil
}
