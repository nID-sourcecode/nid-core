// Code generated by lab.weave.nl/weave/generator, DO NOT EDIT.

package models

import (
	"context"
	"time"

	"github.com/gofrs/uuid"
	"github.com/jinzhu/gorm"
)

// ContactDetail Relational Model
type ContactDetail struct {
	ID        int        `gorm:"primary_key" json:"id"` // primary key
	Address   *Address   `json:"address"`
	AddressID int        `gorm:"index:idx_contact_detail_address_id" json:"address_id"`
	Phone     string     `json:"phone"`
	User      *User      `json:"user"`
	UserID    uuid.UUID  `gorm:"index:idx_contact_detail_user_id" json:"user_id"`
	CreatedAt time.Time  `json:"created_at"`
	DeletedAt *time.Time `json:"deleted_at"`
	UpdatedAt time.Time  `json:"updated_at"`
}

// TableName overrides the table name settings in Gorm to force a specific table name
// in the database.
func (m ContactDetail) TableName() string {
	return "contact_details"
}

// ContactDetailDB is the implementation of the storage interface for
// ContactDetail.
type ContactDetailDB struct {
	Db *gorm.DB // Deprecated: Use ContactDetailDB.DB() instead.
}

// NewContactDetailDB creates a new storage type.
func NewContactDetailDB(db *gorm.DB) *ContactDetailDB {
	return &ContactDetailDB{Db: db}
}

// DB returns the underlying database.
func (m *ContactDetailDB) DB() interface{} {
	return m.Db
}

// TableName returns the table name of the associated model
//
// Deprecated: Use db.Model(ContactDetail{}) instead.
func (m *ContactDetailDB) TableName() string {
	return "contact_details"
}

// CRUD Functions

// Get returns a single ContactDetail as a Database Model
func (m *ContactDetailDB) Get(ctx context.Context, id int) (*ContactDetail, error) {
	var native ContactDetail
	err := m.Db.Table(m.TableName()).Where("id = ?", id).Find(&native).Error
	if err == gorm.ErrRecordNotFound {
		return nil, err
	}

	return &native, err
}

// List returns an array of ContactDetail
func (m *ContactDetailDB) List(ctx context.Context) ([]*ContactDetail, error) {
	var objs []*ContactDetail
	err := m.Db.Table(m.TableName()).Find(&objs).Error
	if err != nil && err != gorm.ErrRecordNotFound {
		return nil, err
	}

	return objs, nil
}

// Add creates a new record.
func (m *ContactDetailDB) Add(ctx context.Context, model *ContactDetail) error {
	err := m.Db.Create(model).Error
	if err != nil {
		return err
	}

	return nil
}

// Update modifies a single record.
func (m *ContactDetailDB) Update(ctx context.Context, model *ContactDetail) error {
	obj, err := m.Get(ctx, model.ID)
	if err != nil {
		return err
	}
	err = m.Db.Model(obj).Updates(model).Error

	return err
}

// Delete removes a single record.
func (m *ContactDetailDB) Delete(ctx context.Context, id int) error {
	err := m.Db.Where("id = ?", id).Delete(&ContactDetail{}).Error
	if err != nil {
		return err
	}

	return nil
}
