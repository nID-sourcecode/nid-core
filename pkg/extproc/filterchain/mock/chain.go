// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	filterchain "github.com/nID-sourcecode/nid-core/pkg/extproc/filterchain"
)

// Chain is an autogenerated mock type for the Chain type
type Chain struct {
	mock.Mock
}

// ProcessRequestBody provides a mock function with given fields: ctx, requestBody
func (_m *Chain) ProcessRequestBody(ctx context.Context, requestBody []byte) (*filterchain.ProcessingResponse, error) {
	ret := _m.Called(ctx, requestBody)

	var r0 *filterchain.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *filterchain.ProcessingResponse); ok {
		r0 = rf(ctx, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filterchain.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessRequestHeaders provides a mock function with given fields: ctx, requestHeaders, skipBody
func (_m *Chain) ProcessRequestHeaders(ctx context.Context, requestHeaders map[string]string, skipBody bool) (*filterchain.ProcessingResponse, error) {
	ret := _m.Called(ctx, requestHeaders, skipBody)

	var r0 *filterchain.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, map[string]string, bool) *filterchain.ProcessingResponse); ok {
		r0 = rf(ctx, requestHeaders, skipBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filterchain.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]string, bool) error); ok {
		r1 = rf(ctx, requestHeaders, skipBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessResponseBody provides a mock function with given fields: ctx, requestBody
func (_m *Chain) ProcessResponseBody(ctx context.Context, requestBody []byte) (*filterchain.ProcessingResponse, error) {
	ret := _m.Called(ctx, requestBody)

	var r0 *filterchain.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte) *filterchain.ProcessingResponse); ok {
		r0 = rf(ctx, requestBody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filterchain.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte) error); ok {
		r1 = rf(ctx, requestBody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessResponseHeaders provides a mock function with given fields: responseHeaders
func (_m *Chain) ProcessResponseHeaders(responseHeaders map[string]string) {
	_m.Called(responseHeaders)
}
