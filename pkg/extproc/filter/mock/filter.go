// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mock

import (
	context "context"

	"github.com/nID-sourcecode/nid-core/pkg/extproc/filter"

	mock "github.com/stretchr/testify/mock"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *Filter) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OnHTTPRequest provides a mock function with given fields: ctx, body, headers
func (_m *Filter) OnHTTPRequest(ctx context.Context, body []byte, headers map[string]string) (*filter.ProcessingResponse, error) {
	ret := _m.Called(ctx, body, headers)

	var r0 *filter.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte, map[string]string) *filter.ProcessingResponse); ok {
		r0 = rf(ctx, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filter.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, map[string]string) error); ok {
		r1 = rf(ctx, body, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnHTTPResponse provides a mock function with given fields: ctx, body, headers
func (_m *Filter) OnHTTPResponse(ctx context.Context, body []byte, headers map[string]string) (*filter.ProcessingResponse, error) {
	ret := _m.Called(ctx, body, headers)

	var r0 *filter.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, []byte, map[string]string) *filter.ProcessingResponse); ok {
		r0 = rf(ctx, body, headers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*filter.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []byte, map[string]string) error); ok {
		r1 = rf(ctx, body, headers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
