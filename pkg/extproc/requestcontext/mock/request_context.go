// Code generated by mockery v2.4.0-beta. DO NOT EDIT.

package mock

import (
	context "context"

	envoy_service_ext_proc_v3alpha "github.com/envoyproxy/go-control-plane/envoy/service/ext_proc/v3"
	mock "github.com/stretchr/testify/mock"
)

// RequestContext is an autogenerated mock type for the RequestContext type
type RequestContext struct {
	mock.Mock
}

// OnRequestBody provides a mock function with given fields: ctx, req
func (_m *RequestContext) OnRequestBody(ctx context.Context, req *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestBody) (*envoy_service_ext_proc_v3alpha.ProcessingResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *envoy_service_ext_proc_v3alpha.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestBody) *envoy_service_ext_proc_v3alpha.ProcessingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*envoy_service_ext_proc_v3alpha.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestBody) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnRequestHeaders provides a mock function with given fields: ctx, req
func (_m *RequestContext) OnRequestHeaders(ctx context.Context, req *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestHeaders) (*envoy_service_ext_proc_v3alpha.ProcessingResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *envoy_service_ext_proc_v3alpha.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestHeaders) *envoy_service_ext_proc_v3alpha.ProcessingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*envoy_service_ext_proc_v3alpha.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_RequestHeaders) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnResponseBody provides a mock function with given fields: ctx, req
func (_m *RequestContext) OnResponseBody(ctx context.Context, req *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseBody) (*envoy_service_ext_proc_v3alpha.ProcessingResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *envoy_service_ext_proc_v3alpha.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseBody) *envoy_service_ext_proc_v3alpha.ProcessingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*envoy_service_ext_proc_v3alpha.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseBody) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OnResponseHeaders provides a mock function with given fields: ctx, req
func (_m *RequestContext) OnResponseHeaders(ctx context.Context, req *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseHeaders) (*envoy_service_ext_proc_v3alpha.ProcessingResponse, error) {
	ret := _m.Called(ctx, req)

	var r0 *envoy_service_ext_proc_v3alpha.ProcessingResponse
	if rf, ok := ret.Get(0).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseHeaders) *envoy_service_ext_proc_v3alpha.ProcessingResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*envoy_service_ext_proc_v3alpha.ProcessingResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *envoy_service_ext_proc_v3alpha.ProcessingRequest_ResponseHeaders) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
