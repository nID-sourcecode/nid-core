// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mock

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	log "github.com/nID-sourcecode/nid-core/pkg/utilities/log/v2"
)

// LoggerUtility is an autogenerated mock type for the LoggerUtility type
type LoggerUtility struct {
	mock.Mock
}

// Debug provides a mock function with given fields: _a0
func (_m *LoggerUtility) Debug(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Debugf provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Debugf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Debugln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Debugln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Error provides a mock function with given fields: _a0
func (_m *LoggerUtility) Error(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Errorf provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Errorf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Errorln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Errorln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Extract provides a mock function with given fields: ctx
func (_m *LoggerUtility) Extract(ctx context.Context) log.LoggerUtility {
	ret := _m.Called(ctx)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(context.Context) log.LoggerUtility); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}

// Fatal provides a mock function with given fields: _a0
func (_m *LoggerUtility) Fatal(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Fatalf provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Fatalf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Fatalln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Fatalln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Info provides a mock function with given fields: _a0
func (_m *LoggerUtility) Info(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Infof provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Infof(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Infoln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Infoln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Panic provides a mock function with given fields: _a0
func (_m *LoggerUtility) Panic(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Panicf provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Panicf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Panicln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Panicln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// SetFormat provides a mock function with given fields: format
func (_m *LoggerUtility) SetFormat(format log.Format) error {
	ret := _m.Called(format)

	var r0 error
	if rf, ok := ret.Get(0).(func(log.Format) error); ok {
		r0 = rf(format)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetFormatter provides a mock function with given fields: formatter
func (_m *LoggerUtility) SetFormatter(formatter interface{}) error {
	ret := _m.Called(formatter)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(formatter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLevel provides a mock function with given fields: _a0
func (_m *LoggerUtility) SetLevel(_a0 log.Level) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(log.Level) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetOut provides a mock function with given fields: writer
func (_m *LoggerUtility) SetOut(writer io.Writer) {
	_m.Called(writer)
}

// Warn provides a mock function with given fields: _a0
func (_m *LoggerUtility) Warn(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// Warnf provides a mock function with given fields: _a0, _a1
func (_m *LoggerUtility) Warnf(_a0 string, _a1 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _a1...)
	_m.Called(_ca...)
}

// Warnln provides a mock function with given fields: _a0
func (_m *LoggerUtility) Warnln(_a0 ...interface{}) {
	var _ca []interface{}
	_ca = append(_ca, _a0...)
	_m.Called(_ca...)
}

// With provides a mock function with given fields: key, value
func (_m *LoggerUtility) With(key string, value interface{}) log.LoggerUtility {
	ret := _m.Called(key, value)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(string, interface{}) log.LoggerUtility); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}

// WithContext provides a mock function with given fields: ctx
func (_m *LoggerUtility) WithContext(ctx context.Context) log.LoggerUtility {
	ret := _m.Called(ctx)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(context.Context) log.LoggerUtility); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}

// WithError provides a mock function with given fields: err
func (_m *LoggerUtility) WithError(err error) log.LoggerUtility {
	ret := _m.Called(err)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(error) log.LoggerUtility); ok {
		r0 = rf(err)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}

// WithField provides a mock function with given fields: key, value
func (_m *LoggerUtility) WithField(key string, value interface{}) log.LoggerUtility {
	ret := _m.Called(key, value)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(string, interface{}) log.LoggerUtility); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}

// WithFields provides a mock function with given fields: _a0
func (_m *LoggerUtility) WithFields(_a0 log.Fields) log.LoggerUtility {
	ret := _m.Called(_a0)

	var r0 log.LoggerUtility
	if rf, ok := ret.Get(0).(func(log.Fields) log.LoggerUtility); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(log.LoggerUtility)
		}
	}

	return r0
}
