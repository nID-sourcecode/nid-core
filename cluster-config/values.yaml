dashboard:
  enabled: true
documentation:
  enabled: true
testing:
  enabled: false
  name: testing
  autopseudo:
    enabled: false
auth:
  enabled: true
wallet:
  enabled: true
autobsn:
  enabled: true
integrationtests:
  enabled: false
luarunner:
  enabled: false
filters:
  enabled: false

namespaceGateways: true

postgres:
  primary:
    initdb:
      scripts:
        init-0.sh: |
          #!/bin/bash
          echo "Creating databases";
          export PGPASSWORD=$POSTGRES_PASSWORD;
          createdb -U postgres authorization;
          createdb -U postgres wallet;
          createdb -U postgres luarunner;
          createdb -U postgres gqlauthdemo;
          createdb -U postgres auth;
          createdb -U postgres databron;
  fullnameOverride: postgresql
  nameOverride: postgresql-0

registrysecret:
  enabled: false
  dockerconfigjson: ""

testproxy:
  service:
    fullnameOverride: testproxy
    namespaceOverride: nid

testproxy-testing:
  service:
    fullnameOverride: testproxy-testing
    namespaceOverride: testing

gateway:
  enabled: true
  https: true
  minTlsVersion: TLSV1_3
  mtls:
    enabled: false

certificate: true

external-dns:
  enabled: true
  sources: ["istio-gateway"]
  provider: "google"
  policy: "upsert-only"
  google:
    serviceAccountSecret: external-dns-serviceaccount
  txtOwnerId: "nid-example-cluster"

externalroutes:
  - name: postmark
    routes:
      - rest.messagebird.com
  - name: messagebird
    routes:
      - api.postmarkapp.com
  - name: gqlproxy
    routes:
      - gqlciz.wlz.n-id.network

namespaces:
  - name: nid
    autopseudo:
      enabled: false

storageclasses:
  - name: ssd
    type: pd-ssd
    zone: europe-west1-d

redis:
  enabled: false
  fullnameOverride: redis

# (External service gateway) External services can use this reverse proxy to access dataproviders inside the cluster.
# authswap wil be applied to this proxy to provide the correct JWT for the requested .
nginx:
  enabled: false
  fullnameOverride: esg
  podLabels:
    nid-dataconsumer: disabled # enable to apply authswap filter
  serviceAccount:
    name: "nginx"
    autoMount: true
  service:
    type: NodePort
    port: 80
  containerPorts:
    http: 8081
  serverBlock: |-
    server {
      rewrite_log on;
      listen 8081;
      location ~ ^/(.*)/(.*)$ {
          resolver kube-dns.kube-system.svc.cluster.local valid=5s;
          proxy_http_version 1.1;
          proxy_pass 'http://$1.svc.cluster.local/$2';
          proxy_set_header Host $proxy_host;
      }
    }
